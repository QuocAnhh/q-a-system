// filepath: c:\Users\ADMIN\Project-NLP\frontend\chatbot.js
// Bi·∫øn to√†n c·ª•c
let currentConversationId = null;
let conversations = [];
let messageCounter = 0; // ƒê·∫£m b·∫£o th·ª© t·ª± tin nh·∫Øn
let pendingMessages = new Map(); // Theo d√µi tin nh·∫Øn ƒëang x·ª≠ l√Ω
let isProcessing = false; // Debouncing ƒë·ªÉ tr√°nh spam requests
let lastRequestTime = 0; // Tracking ƒë·ªÉ rate limiting

// ====== INITIALIZATION & EVENT LISTENERS ======
document.addEventListener('DOMContentLoaded', function() {
    console.log('[DEBUG] Document loaded, initializing app...');
    
    // X·ª≠ l√Ω l·ªói to√†n c·ª•c ƒë·ªÉ ghi nh·∫≠t k√Ω
    window.onerror = function(message, source, lineno, colno, error) {
        console.error('[GLOBAL ERROR]', message, 'at', source, lineno, colno, error);
        showMessage('‚ùå L·ªói JavaScript: ' + message, 'error');
        return false;
    };
      // Kh·ªüi t·∫°o ·ª©ng d·ª•ng
    initializeApp();
    setupEventListeners();
});

async function initializeApp() {
    try {
        console.log('[DEBUG] Initializing app...');
        
        // Check for OAuth callback first
        handleOAuthCallback();
        
        // Reset tr·∫°ng th√°i
        clearChatBox();
        messageCounter = 0;
        pendingMessages.clear();
        currentConversationId = null;
        
        // Lu√¥n load danh s√°ch v√† l·ªãch s·ª≠ chat c·ªßa conv active (n·∫øu c√≥)
        await loadConversationsAndShowActive();
        
        // Check calendar status
        await checkCalendarStatus();
        
        console.log('[DEBUG] App initialized successfully');
    } catch (error) {
        console.error('[ERROR] Initialization error:', error);
        showMessage('‚ùå C√≥ l·ªói khi kh·ªüi t·∫°o ·ª©ng d·ª•ng: ' + error.message, 'error');
    }
}

// Load and show a conversation (including messages)
async function loadAndShowConversation(conversationId) {
    try {
        const response = await fetch(`/conversations/${conversationId}`, { credentials: 'same-origin' });
        const data = await response.json();
        if (response.ok) {
            const conversation = data.conversation;
            currentConversationId = conversation.id;
            updateAIModeIndicator(conversation.ai_mode);
            clearChatBox();
            messageCounter = 0;
            pendingMessages.clear();
            (conversation.messages || []).forEach((message, index) => {
                const userMsgId = `user-loaded-${conversationId}-${index}`;
                const botMsgId = `bot-loaded-${conversationId}-${index}`;
                addMessage(message.question, 'user', false, userMsgId);
                addMessage(message.answer, 'bot', false, botMsgId);
            });
            messageCounter = (conversation.messages || []).length * 2 + 1000;
        } else {
            clearChatBox();
            showWelcomeMessage();
        }
    } catch (error) {
        clearChatBox();
        showWelcomeMessage();
    }
}

// Always load conversations and show the active one
async function loadConversationsAndShowActive() {
    try {
        console.log('[DEBUG] Loading conversations and showing active...');
        const response = await fetch('/conversations', { 
            credentials: 'same-origin',
            cache: 'no-cache' // ƒê·∫£m b·∫£o kh√¥ng cache k·∫øt qu·∫£
        });
        
        if (!response.ok) {
            console.error('[ERROR] Failed to load conversations:', response.status);
            clearChatBox();
            showWelcomeMessage();
            return;
        }
        
        const data = await response.json();
        console.log('[DEBUG] Received conversations data:', data);
        
        conversations = data.conversations || [];
        renderConversations();
        
        if (conversations.length === 0) {
            console.log('[DEBUG] No conversations found, clearing chatbox');
            clearChatBox();
            showWelcomeMessage();
            return;
        }        // T√¨m h·ªôi tho·∫°i ƒëang active - ∆∞u ti√™n is_current, n·∫øu kh√¥ng c√≥ th√¨ l·∫•y conversation ƒë·∫ßu ti√™n
        const currentConv = conversations.find(c => c.is_current || c.is_active) || conversations[0];
        if (currentConv) {
            console.log('[DEBUG] Found active conversation:', currentConv.id);
            // ƒê·ªìng b·ªô currentConversationId v·ªõi conversation active t·ª´ server
            currentConversationId = currentConv.id;
            await loadAndShowConversation(currentConv.id);
        } else {
            console.log('[DEBUG] No active conversation found');
            currentConversationId = null;
            clearChatBox();
            showWelcomeMessage();
        }
    } catch (error) {
        console.error('[ERROR] Error in loadConversationsAndShowActive:', error);
        clearChatBox();
        showWelcomeMessage();
    }
}

function renderConversations() {
    console.log('[DEBUG] Rendering conversations:', conversations.length);
    const listElement = document.getElementById('conversationList');
    
    if (!listElement) {
        console.error('[ERROR] Conversation list element not found');
        return;
    }
    
    if (conversations.length === 0) {
        listElement.innerHTML = '<p style="text-align: center; color: #666; font-style: italic;">Ch∆∞a c√≥ cu·ªôc h·ªôi tho·∫°i n√†o</p>';
        // Disable export button if no conversation
        const exportBtn = document.getElementById('exportButton');
        if (exportBtn) exportBtn.disabled = true;
        return;
    }
    
    // Enable export button if conversations exist
    const exportBtn = document.getElementById('exportButton');
    if (exportBtn) exportBtn.disabled = false;
      // Render conversation items
    listElement.innerHTML = conversations.map(conv => {
        const date = new Date(conv.updated_at).toLocaleDateString('vi-VN');
        const time = new Date(conv.updated_at).toLocaleTimeString('vi-VN', {hour: '2-digit', minute: '2-digit'});
        // Logic x√°c ƒë·ªãnh active: ∆∞u ti√™n currentConversationId, sau ƒë√≥ is_current t·ª´ server
        const isActive = (currentConversationId && conv.id === currentConversationId) || 
                         (!currentConversationId && (conv.is_current || conv.is_active));
        return `
            <div class="conversation-item ${isActive ? 'active' : ''}" data-convid="${conv.id}">
                <div class="conversation-title">${conv.title}</div>
                <div class="conversation-meta">
                    ${conv.message_count} tin nh·∫Øn ‚Ä¢ ${date} ${time}
                    ${conv.ai_mode ? `‚Ä¢ ü§ñ ${getAIModeDisplay(conv.ai_mode)}` : ''}
                </div>
                <div class="conversation-actions">
                    <small>${isActive ? '‚Ä¢ ƒêang active' : ''}</small>
                    <button class="delete-btn" data-deleteid="${conv.id}">X√≥a</button>
                </div>
            </div>
        `;
    }).join('');
    
    // Attach event listeners to conversation items and delete buttons
    attachConversationEventListeners();
}

// ƒê·∫£m b·∫£o ch·ªâ g·∫Øn event listener cho input v√† n√∫t g·ª≠i m·ªôt l·∫ßn duy nh·∫•t
function setupEventListeners() {
    console.log('[DEBUG] Setting up event listeners');
    
    // Input field v√† n√∫t g·ª≠i
    const questionInput = document.getElementById('questionInput');
    if (questionInput) {
        questionInput.addEventListener('keydown', function(e) {
            if (e.key === 'Enter' && !e.shiftKey && !questionInput.disabled) {
                e.preventDefault();
                sendQuestion();
            }
        });
    } else {
        console.error('[ERROR] Question input element not found');
    }
    
    const sendBtn = document.querySelector('.send-btn');
    if (sendBtn) {
        sendBtn.addEventListener('click', sendQuestion);
    } else {
        console.error('[ERROR] Send button not found');
    }
    
    // N√∫t t·∫°o cu·ªôc h·ªôi tho·∫°i m·ªõi
    const newChatBtn = document.getElementById('newChatButton');
    if (newChatBtn) {
        console.log('[DEBUG] Attaching event listener to newChatButton');
        newChatBtn.addEventListener('click', function() {
            console.log('[DEBUG] New chat button clicked');
            createNewConversation();
        });
    } else {
        console.error('[ERROR] New chat button not found');
    }
      // N√∫t export chat
    const exportBtn = document.getElementById('exportButton');
    if (exportBtn) {
        console.log('[DEBUG] Attaching event listener to exportButton');
        exportBtn.addEventListener('click', function() {
            console.log('[DEBUG] Export button clicked');
            exportChatHistory();
        });
    } else {
        console.error('[ERROR] Export button not found');
    }
    
    // Calendar authentication button
    const calendarAuthBtn = document.getElementById('calendarAuthBtn');
    if (calendarAuthBtn) {
        console.log('[DEBUG] Attaching event listener to calendarAuthBtn');
        calendarAuthBtn.addEventListener('click', function() {
            console.log('[DEBUG] Calendar auth button clicked');
            authenticateCalendar();
        });
    } else {
        console.error('[ERROR] Calendar auth button not found');
    }
}

// Attach event listeners to conversation items
function attachConversationEventListeners() {
    console.log('[DEBUG] Attaching event listeners to conversation items');
    // ƒê√≠nh k√®m event listeners cho c√°c m·ª•c h·ªôi tho·∫°i
    document.querySelectorAll('.conversation-item').forEach(item => {
        const convId = item.getAttribute('data-convid');
        
        // Add click event listener for switching conversations
        item.addEventListener('click', (e) => {
            // Avoid triggering switch when clicking delete button
            if (e.target.classList.contains('delete-btn')) return;
            console.log('[DEBUG] Conversation item clicked:', convId);
            switchConversation(convId);
        });
        
        // Add click event listener for delete buttons
        const delBtn = item.querySelector('.delete-btn');
        if (delBtn) {
            delBtn.addEventListener('click', (e) => {
                console.log('[DEBUG] Delete button clicked for:', convId);
                deleteConversation(convId, e);
            });
        }
    });
}

function showWelcomeMessage() {
    // T·∫°o tin nh·∫Øn ch√†o m·ª´ng trong chatbox n·∫øu ch∆∞a c√≥
    const chatBox = document.getElementById('chatBox');
    if (!chatBox) return;
    
    // N·∫øu chatbox ƒë√£ tr·ªëng, th√™m tin nh·∫Øn ch√†o m·ª´ng
    if (chatBox.children.length === 0) {
        const welcomeMessage = document.createElement('div');
        welcomeMessage.className = 'bubble bot';
        welcomeMessage.innerHTML = `
            <strong class="bot">ü§ñ Copailit:</strong><br>
            Xin ch√†o! T√¥i l√† Copailit AI. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n!
        `;
        chatBox.appendChild(welcomeMessage);
    }
}

// ====== CONVERSATION MANAGEMENT ======

async function loadConversations(loadMessages = false) {
    try {
        console.log('[DEBUG] Loading conversations...');
        const response = await fetch('/conversations', { credentials: 'same-origin' });
        const data = await response.json();
        console.log('[DEBUG] Conversations response:', data);        if (response.ok) {
            conversations = data.conversations || [];
            
            if (conversations.length === 0) {
                console.log('[DEBUG] No conversations found');
                currentConversationId = null;
                renderConversations();
                clearChatBox();
                showWelcomeMessage();
                return;
            }            // Lu√¥n t√¨m conv ƒëang active - ∆∞u ti√™n is_current, n·∫øu kh√¥ng c√≥ th√¨ is_active
            const currentConv = conversations.find(c => c.is_current || c.is_active);
            if (currentConv) {
                currentConversationId = currentConv.id;
                console.log('[DEBUG] Synced currentConversationId:', currentConversationId);
                updateAIModeIndicator(currentConv.ai_mode);
                if (loadMessages) {
                    await loadAndShowConversation(currentConv.id);
                }
            } else {
                currentConversationId = null;
                clearChatBox();
                showWelcomeMessage();
            }
            
            // Re-render conversations v·ªõi currentConversationId ƒë√£ ƒë∆∞·ª£c sync
            renderConversations();
        } else {
            console.error('[ERROR] Failed to load conversations:', data);
            showMessage('‚ùå Kh√¥ng th·ªÉ t·∫£i danh s√°ch cu·ªôc h·ªôi tho·∫°i: ' + (data.error || 'L·ªói kh√¥ng x√°c ƒë·ªãnh'), 'error');
        }
    } catch (error) {
        console.error('L·ªói khi t·∫£i danh s√°ch cu·ªôc h·ªôi tho·∫°i:', error);
        showMessage('‚ùå C√≥ l·ªói x·∫£y ra khi t·∫£i danh s√°ch cu·ªôc h·ªôi tho·∫°i', 'error');
    }
}

function getAIModeDisplay(mode) {
    const modes = {
        'math': 'To√°n h·ªçc',
        'physics': 'V·∫≠t l√Ω', 
        'programming': 'L·∫≠p tr√¨nh',
        'chemistry': 'H√≥a h·ªçc',
        'history': 'L·ªãch s·ª≠',
        'english': 'Ti·∫øng Anh',
        'study': 'H·ªçc t·∫≠p',
        'general': 'Chung'
    };
    return modes[mode] || mode;
}

async function createNewConversation() {
    try {
        showMessage('üîÑ ƒêang t·∫°o cu·ªôc h·ªôi tho·∫°i m·ªõi...', 'info');
        
        const response = await fetch('/conversations/new', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            credentials: 'same-origin'
        });
        
        if (!response.ok) {
            const errorData = await response.json();
            console.error('[ERROR] Failed to create new conversation:', errorData);
            showMessage('‚ùå Kh√¥ng th·ªÉ t·∫°o cu·ªôc h·ªôi tho·∫°i m·ªõi: ' + (errorData.error || 'L·ªói kh√¥ng x√°c ƒë·ªãnh'), 'error');
            return;
        }
        
        const data = await response.json();
        console.log('[DEBUG] New conversation created:', data);
        
        // Explicitly clear chatbox
        clearChatBox();
          // Update conversation list and show active one
        conversations = data.conversations || [];
        
        // Find the newly created conversation (should be active)
        const newConv = data.conversation;
        if (newConv) {
            currentConversationId = newConv.id;
            console.log('[DEBUG] Set currentConversationId to new conversation:', currentConversationId);
            updateAIModeIndicator(newConv.ai_mode || null);
            showWelcomeMessage();
        }
        
        // Re-render conversations v·ªõi currentConversationId ƒë√£ ƒë∆∞·ª£c set
        renderConversations();
        
        showMessage('‚úÖ ƒê√£ t·∫°o cu·ªôc h·ªôi tho·∫°i m·ªõi! Context ƒë√£ ƒë∆∞·ª£c reset.', 'success');
    } catch (error) {
        console.error('Error creating new conversation:', error);
        showMessage('‚ùå C√≥ l·ªói x·∫£y ra khi t·∫°o cu·ªôc h·ªôi tho·∫°i m·ªõi: ' + error.message, 'error');
    }
}

async function switchConversation(conversationId) {
    try {
        if (currentConversationId === conversationId) {
            console.log('[DEBUG] Already on this conversation:', conversationId);
            return;
        }
        
        console.log('[DEBUG] Switching to conversation:', conversationId);
        const response = await fetch(`/conversations/${conversationId}/switch`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            credentials: 'same-origin'
        });
        const data = await response.json();
        if (response.ok) {
            // C·∫≠p nh·∫≠t currentConversationId ngay l·∫≠p t·ª©c
            currentConversationId = conversationId;
            console.log('[DEBUG] Updated currentConversationId to:', currentConversationId);
            
            // Re-render conversation list ƒë·ªÉ hi·ªÉn th·ªã m√†u ƒë√∫ng
            renderConversations();
            
            // Load conversation content
            await loadAndShowConversation(conversationId);
            updateAIModeIndicator(data.conversation.ai_mode);
        } else {
            showMessage('‚ùå Kh√¥ng th·ªÉ chuy·ªÉn cu·ªôc h·ªôi tho·∫°i: ' + data.error, 'error');
        }
    } catch (error) {
        console.error('Error switching conversation:', error);
        showMessage('‚ùå C√≥ l·ªói x·∫£y ra khi chuy·ªÉn cu·ªôc h·ªôi tho·∫°i', 'error');
    }
}

async function deleteConversation(conversationId, event) {
    try {
        console.log('[DEBUG] Deleting conversation:', conversationId);
        
        // NgƒÉn ch·∫∑n s·ª± ki·ªán click lan truy·ªÅn l√™n th·∫ª cha
        if (event) {
            event.stopPropagation();
            event.preventDefault();
        }
        
        if (!confirm('B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a cu·ªôc h·ªôi tho·∫°i n√†y kh√¥ng?')) {
            return;
        }
        
        showMessage('üîÑ ƒêang x√≥a cu·ªôc h·ªôi tho·∫°i...', 'info');
        const response = await fetch(`/conversations/${conversationId}`, {
            method: 'DELETE',
            credentials: 'same-origin'
        });
        
        if (!response.ok) {
            const errorData = await response.json();
            console.error('[ERROR] Failed to delete conversation:', errorData);
            showMessage('‚ùå Kh√¥ng th·ªÉ x√≥a cu·ªôc h·ªôi tho·∫°i: ' + (errorData.error || 'L·ªói kh√¥ng x√°c ƒë·ªãnh'), 'error');
            return;
        }
        
        const data = await response.json();
        console.log('[DEBUG] Conversation deleted successfully:', data);
        
        // N·∫øu x√≥a conversation hi·ªán t·∫°i, clear chatbox
        if (conversationId === currentConversationId) {
            clearChatBox();
            currentConversationId = null;
            showWelcomeMessage();
        }
        
        // C·∫≠p nh·∫≠t l·∫°i danh s√°ch v√† hi·ªÉn th·ªã conversation active (n·∫øu c√≤n)
        conversations = data.conversations || [];
        renderConversations();
        
        showMessage('‚úÖ ƒê√£ x√≥a cu·ªôc h·ªôi tho·∫°i!', 'success');
    } catch (error) {
        console.error('[ERROR] Error deleting conversation:', error);
        showMessage('‚ùå C√≥ l·ªói x·∫£y ra khi x√≥a cu·ªôc h·ªôi tho·∫°i: ' + error.message, 'error');
    }
}

// ====== CHAT FUNCTIONS ======

async function sendQuestion() {
    const input = document.getElementById('questionInput');
    const question = input.value.trim();
    
    if (!question) {
        showMessage('Vui l√≤ng nh·∫≠p c√¢u h·ªèi!', 'error');
        return;
    }
    
    // Debouncing - tr√°nh spam requests
    if (isProcessing) {
        showMessage('Vui l√≤ng ƒë·ª£i c√¢u tr·∫£ l·ªùi tr∆∞·ªõc khi g·ª≠i c√¢u h·ªèi m·ªõi!', 'warning');
        return;
    }
    
    // Rate limiting - t·ªëi thi·ªÉu 1 gi√¢y gi·ªØa c√°c requests
    const currentTime = Date.now();
    if (currentTime - lastRequestTime < 1000) {
        showMessage('Vui l√≤ng ƒë·ª£i √≠t nh·∫•t 1 gi√¢y gi·ªØa c√°c c√¢u h·ªèi!', 'warning');
        return;
    }
    
    isProcessing = true;
    lastRequestTime = currentTime;
    
    // T·∫°o unique message ID ƒë·ªÉ ƒë·∫£m b·∫£o th·ª© t·ª±
    const messageId = ++messageCounter;
    const userMessageId = `user-${messageId}`;
    const botMessageId = `bot-${messageId}`;
    
    // Disable input while processing
    input.disabled = true;
    
    // Add user message v·ªõi ID c·ªë ƒë·ªãnh
    addMessage(question, 'user', false, userMessageId);
    
    // Show typing indicator v·ªõi ID c·ªë ƒë·ªãnh
    addMessage('ü§ñ ƒêang tr·∫£ l·ªùi...', 'bot', true, botMessageId);
    
    // Clear input
    input.value = '';
    
    // ƒê√°nh d·∫•u tin nh·∫Øn ƒëang x·ª≠ l√Ω
    pendingMessages.set(messageId, { question, userMessageId, botMessageId });
      try {
        // Check if this is a calendar request and calendar is available
        const isCalendarRequest = hasCalendarIntent(question);
        let endpoint = '/chat';
          if (isCalendarRequest && calendarStatus.authenticated && calendarStatus.status === 'ready') {
            console.log('[DEBUG] Detected calendar request, using calendar endpoint');
            endpoint = '/calendar/process';
        }
        
        const response = await fetch(endpoint, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ 
                question: question,
                user_id: getCurrentUserId()
            }),
            credentials: 'same-origin'
        });
        
        const data = await response.json();
        
        // Ki·ªÉm tra xem tin nh·∫Øn n√†y c√≥ c√≤n pending kh√¥ng (tr√°nh race condition)
        if (!pendingMessages.has(messageId)) {
            console.warn(`Message ${messageId} was already processed`);
            return;
        }
        
        // Remove t·ª´ pending
        pendingMessages.delete(messageId);
          if (response.ok) {
            // Replace typing indicator v·ªõi response th·ª±c t·∫ø
            replaceMessage(botMessageId, data.answer || data.response || data.message, 'bot');
            
            // Update suggestions
            updateSuggestions(data.suggestions || []);
            
            // Update AI mode indicator
            if (data.ai_mode) {
                updateAIModeIndicator(data.ai_mode);
            }
            
            // Handle calendar-specific responses
            if (data.calendar_action) {
                console.log('[DEBUG] Calendar action performed:', data.calendar_action);
                if (data.calendar_action === 'event_created') {
                    showMessage('‚úÖ S·ª± ki·ªán ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng trong Google Calendar!', 'success');
                }
            }
            
            // If calendar request but not authenticated, show auth prompt
            if (isCalendarRequest && (!calendarStatus.authenticated || calendarStatus.status !== 'ready')) {
                setTimeout(() => {
                    showMessage('üìÖ ƒê·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng l·ªãch, vui l√≤ng k·∫øt n·ªëi Google Calendar tr∆∞·ªõc.', 'info');
                }, 1000);
            }
            
            // Ch·ªâ c·∫≠p nh·∫≠t conversation list m√† KH√îNG reload messages
            // ƒë·ªÉ c·∫≠p nh·∫≠t metadata nh∆∞ message count
            setTimeout(() => {
                updateConversationMetadata();
            }, 500);
            
        } else {
            replaceMessage(botMessageId, '‚ùå L·ªói: ' + (data.error || data.message || 'Unknown error'), 'bot');
        }
        
    } catch (error) {
        console.error('L·ªói khi g·ª≠i c√¢u h·ªèi:', error);
        
        // Ki·ªÉm tra xem tin nh·∫Øn c√≥ c√≤n pending kh√¥ng
        if (pendingMessages.has(messageId)) {
            pendingMessages.delete(messageId);
            replaceMessage(botMessageId, '‚ùå C√≥ l·ªói x·∫£y ra khi g·ª≠i c√¢u h·ªèi. Vui l√≤ng th·ª≠ l·∫°i.', 'bot');
        }
    } finally {
        // Re-enable input and reset processing state
        input.disabled = false;
        input.focus();
        isProcessing = false;
    }
}

function addMessage(message, sender, isTyping = false, customId = null) {
    const chatBox = document.getElementById('chatBox');
    const messageId = customId || `${sender}-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
    
    // Process HTML content n·∫øu l√† bot message
    const processedMessage = sender === 'bot' ? processHTMLContent(message) : message;
    
    const bubble = document.createElement('div');
    bubble.className = `bubble ${sender} ${isTyping ? 'typing' : ''}`;
    bubble.id = messageId;
    
    const senderIcon = sender === 'user' ? 'üò∫' : 'ü§ñ';
    const senderName = sender === 'user' ? 'B·∫°n' : 'Copailit';
    
    bubble.innerHTML = `<strong class="${sender}">${senderIcon} ${senderName}:</strong><br>${processedMessage}`;
    
    // Smooth animation
    bubble.style.opacity = '0';
    bubble.style.transform = 'translateY(20px)';
    
    chatBox.appendChild(bubble);
    
    // Trigger animation
    setTimeout(() => {
        bubble.style.opacity = '1';
        bubble.style.transform = 'translateY(0)';
    }, 50);
    
    // Auto scroll
    chatBox.scrollTop = chatBox.scrollHeight;
    
    return messageId;
}

function replaceMessage(messageId, newContent, sender) {
    const messageElement = document.getElementById(messageId);
    if (messageElement) {
        // Process HTML content n·∫øu l√† bot message
        const processedContent = sender === 'bot' ? processHTMLContent(newContent) : newContent;
        
        const senderIcon = sender === 'user' ? 'üò∫' : 'ü§ñ';
        const senderName = sender === 'user' ? 'B·∫°n' : 'Copailit';
        
        messageElement.className = `bubble ${sender}`; // Remove typing class
        messageElement.innerHTML = `<strong class="${sender}">${senderIcon} ${senderName}:</strong><br>${processedContent}`;
        
        // Scroll to bottom
        const chatBox = document.getElementById('chatBox');
        chatBox.scrollTop = chatBox.scrollHeight;
    }
}

function removeMessage(messageId) {
    const messageElement = document.getElementById(messageId);
    if (messageElement) {
        messageElement.remove();
    }
}

function updateSuggestions(suggestions) {
    const suggestionsContainer = document.getElementById('suggestions');
    
    if (suggestions.length === 0) {
        suggestionsContainer.innerHTML = '';
        return;
    }
    
    suggestionsContainer.innerHTML = suggestions.map(suggestion => 
        `<div class="suggestion" onclick="askQuestion('${suggestion.replace(/'/g, "\\'")}')">üí° ${suggestion}</div>`
    ).join('');
}

function updateAIModeIndicator(mode) {
    const indicator = document.getElementById('aiModeIndicator');
    const modeSpan = document.getElementById('currentMode');
    
    if (!indicator || !modeSpan) {
        console.warn('[WARNING] AI mode indicator elements not found in the DOM');
        return;
    }
    
    if (mode) {
        modeSpan.textContent = getAIModeDisplay(mode);
        indicator.style.display = 'block';
    } else {
        indicator.style.display = 'none';
    }
}

// ====== DEBUG FUNCTIONS ======

async function exportChatHistory() {
    try {
        console.log('[DEBUG] Starting chat export...');
        showMessage('üì• ƒêang xu·∫•t l·ªãch s·ª≠ chat...', 'info');
        
        // Ki·ªÉm tra n·∫øu kh√¥ng c√≥ h·ªôi tho·∫°i
        if (!conversations || conversations.length === 0) {
            showMessage('‚ùå Kh√¥ng c√≥ cu·ªôc h·ªôi tho·∫°i n√†o ƒë·ªÉ xu·∫•t', 'error');
            return;
        }
        
        const response = await fetch('/export-chat', {
            credentials: 'same-origin'
        });
        console.log('[DEBUG] Export response status:', response.status);
        
        if (!response.ok) {
            let errorMessage = 'L·ªói kh√¥ng x√°c ƒë·ªãnh';
            try {
                const errorData = await response.json();
                console.error('[ERROR] Export failed:', errorData);
                errorMessage = errorData.error || errorMessage;
            } catch (e) {
                console.error('Could not parse error response:', e);
            }
            
            showMessage('‚ùå Kh√¥ng th·ªÉ export chat: ' + errorMessage, 'error');
            return;
        }
        
        // T·∫°o file download HTML
        const blob = await response.blob();
        console.log('[DEBUG] Export blob size:', blob.size);
        
        if (blob.size === 0) {
            showMessage('‚ùå Xu·∫•t file th·∫•t b·∫°i: file tr·ªëng', 'error');
            return;
        }
        
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.style.display = 'none';
        a.href = url;
        a.download = `chat_export_${new Date().toISOString().slice(0,19).replace(/:/g,'-')}.html`;
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
        document.body.removeChild(a);
        
        showMessage('‚úÖ ƒê√£ t·∫£i xu·ªëng l·ªãch s·ª≠ chat th√†nh c√¥ng (ƒë·ªãnh d·∫°ng HTML)!', 'success');
    } catch (error) {
        console.error('Error exporting chat:', error);
        showMessage('‚ùå C√≥ l·ªói x·∫£y ra khi export chat: ' + error.message, 'error');
    }
}

// ====== HELPER FUNCTIONS ======

function askQuestion(question) {
    // Automatically fill input and send a question - used by suggestion buttons
    const input = document.getElementById('questionInput');
    input.value = question;
    sendQuestion();
}

function clearChatBox() {
    const chatBox = document.getElementById('chatBox');
    if (chatBox) {
        chatBox.innerHTML = '';
    }
    
    // Clear suggestions
    const suggestionsContainer = document.getElementById('suggestions');
    if (suggestionsContainer) {
        suggestionsContainer.innerHTML = '';
    }
    
    // Reset AI mode indicator
    updateAIModeIndicator(null);
}

function showMessage(message, type = 'info') {
    const messageArea = document.getElementById('messageArea');
    if (!messageArea) return;
    
    const messageElement = document.createElement('div');
    messageElement.className = `message-alert ${type}`;
    messageElement.textContent = message;
    
    messageArea.appendChild(messageElement);
    
    // Auto remove after 5 seconds
    setTimeout(() => {
        messageElement.classList.add('fade-out');
        setTimeout(() => messageElement.remove(), 500);
    }, 5000);
}

// H√†m c·∫≠p nh·∫≠t metadata c·ªßa conversation list m√† kh√¥ng reload messages
async function updateConversationMetadata() {
    try {
        const response = await fetch('/conversations', { credentials: 'same-origin' });
        const data = await response.json();
        if (response.ok) {
            conversations = data.conversations || [];
            renderConversations();
        }
    } catch (error) {
        console.error('Error updating conversation metadata:', error);
    }
}

// ====== HTML CONTENT PROCESSING ======

function processHTMLContent(htmlContent) {
    // Post-process HTML content ƒë·ªÉ ƒë·∫£m b·∫£o format ƒë√∫ng
    let processed = htmlContent;
    
    // Fix common markdown leakage
    processed = processed.replace(/```(\w+)?\n?([\s\S]*?)```/g, function(match, lang, code) {
        const language = lang || 'text';
        const escapedCode = escapeHtml(code.trim());
        return `<div class="code-block">
            <div class="code-header">${language}</div>
            <div class="code-content">${escapedCode}</div>
        </div>`;
    });
    
    // Fix inline code v·ªõi backticks
    processed = processed.replace(/`([^`]+)`/g, '<code class="inline-code">$1</code>');
    
    // ƒê·∫£m b·∫£o HTML entities ƒë∆∞·ª£c escape ƒë√∫ng trong code blocks
    processed = processed.replace(/<div class="code-content">([\s\S]*?)<\/div>/g, function(match, content) {
        const safeContent = content
            .replace(/</g, '&lt;')
            .replace(/>/g, '&gt;')
            .replace(/"/g, '&quot;')
            .replace(/'/g, '&#39;');
        return `<div class="code-content">${safeContent}</div>`;
    });
    
    // Fix line breaks in formulas
    processed = processed.replace(/<div class="formula-block">([\s\S]*?)<\/div>/g, function(match, content) {
        const formattedContent = content.replace(/\n/g, '<br>');
        return `<div class="formula-block">${formattedContent}</div>`;
    });
    
    return processed;
}

function escapeHtml(unsafe) {
    return unsafe
        .replace(/&/g, "&amp;")
        .replace(/</g, "&lt;")
        .replace(/>/g, "&gt;")
        .replace(/"/g, "&quot;")
        .replace(/'/g, "&#039;");
}

// ====== CALENDAR INTEGRATION ======
let calendarStatus = {
    authenticated: false,
    status: 'checking',
    message: 'ƒêang ki·ªÉm tra k·∫øt n·ªëi...'
};

// Check calendar authentication status
async function checkCalendarStatus() {
    try {
        console.log('[DEBUG] Checking calendar status...');
        const userId = getCurrentUserId();
        const response = await fetch(`/calendar/auth/status?user_id=${encodeURIComponent(userId)}`, {
            credentials: 'same-origin'
        });
        
        if (response.ok) {
            const data = await response.json();
            calendarStatus = data;
            updateCalendarUI();
            console.log('[DEBUG] Calendar status:', data);
        } else {
            calendarStatus = {
                authenticated: false,
                status: 'error',
                message: 'L·ªói ki·ªÉm tra tr·∫°ng th√°i l·ªãch'
            };
            updateCalendarUI();
        }
    } catch (error) {
        console.error('[ERROR] Calendar status check failed:', error);
        calendarStatus = {
            authenticated: false,
            status: 'error',
            message: 'Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi d·ªãch v·ª• l·ªãch'
        };
        updateCalendarUI();
    }
}

// Update calendar UI based on status
function updateCalendarUI() {
    const statusElement = document.getElementById('calendarStatus');
    const statusText = document.getElementById('calendarStatusText');
    const authBtn = document.getElementById('calendarAuthBtn');
    
    if (!statusElement || !statusText || !authBtn) return;
    
    // Remove all status classes
    statusElement.classList.remove('connected', 'disconnected', 'checking');
    
    if (calendarStatus.authenticated && calendarStatus.status === 'ready') {
        statusElement.classList.add('connected');
        statusText.textContent = 'üìÖ L·ªãch ƒë√£ k·∫øt n·ªëi';
        authBtn.style.display = 'none';
    } else if (calendarStatus.status === 'need_auth') {
        statusElement.classList.add('disconnected');
        statusText.textContent = 'üìÖ Ch∆∞a k·∫øt n·ªëi l·ªãch';
        authBtn.style.display = 'inline-block';
        authBtn.textContent = 'K·∫øt n·ªëi Google Calendar';
        authBtn.disabled = false;
    } else if (calendarStatus.status === 'need_refresh') {
        statusElement.classList.add('disconnected');
        statusText.textContent = 'üìÖ C·∫ßn l√†m m·ªõi k·∫øt n·ªëi';
        authBtn.style.display = 'inline-block';
        authBtn.textContent = 'L√†m m·ªõi k·∫øt n·ªëi';
        authBtn.disabled = false;
    } else if (calendarStatus.status === 'checking') {
        statusElement.classList.add('checking');
        statusText.textContent = 'üìÖ ƒêang ki·ªÉm tra...';
        authBtn.style.display = 'none';
    } else {
        statusElement.classList.add('disconnected');
        statusText.textContent = 'üìÖ L·ªói k·∫øt n·ªëi l·ªãch';
        authBtn.style.display = 'inline-block';
        authBtn.textContent = 'Th·ª≠ l·∫°i';
        authBtn.disabled = false;
    }
    
    // Update calendar suggestions
    updateCalendarSuggestions();
}

// Handle calendar authentication
async function authenticateCalendar() {
    try {
        console.log('[DEBUG] Starting calendar authentication...');
        const authBtn = document.getElementById('calendarAuthBtn');
        if (authBtn) {
            authBtn.disabled = true;
            authBtn.textContent = 'ƒêang x·ª≠ l√Ω...';
        }
        
        const response = await fetch('/calendar/auth/url', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            credentials: 'same-origin',
            body: JSON.stringify({
                user_id: getCurrentUserId()
            })
        });
        
        if (response.ok) {
            const data = await response.json();
            if (data.success && data.auth_url) {
                // Open auth URL in new tab
                window.open(data.auth_url, '_blank');
                
                // Show message to user
                showMessage('üîó ƒê√£ m·ªü tab m·ªõi ƒë·ªÉ x√°c th·ª±c Google Calendar. Sau khi ho√†n t·∫•t, h√£y quay l·∫°i ƒë√¢y.', 'info');
                
                // Start polling for auth completion
                startAuthPolling();
            } else {
                showMessage('‚ùå ' + (data.message || 'Kh√¥ng th·ªÉ t·∫°o link x√°c th·ª±c'), 'error');
            }
        } else {
            showMessage('‚ùå L·ªói k·∫øt n·ªëi v·ªõi server', 'error');
        }
    } catch (error) {
        console.error('[ERROR] Calendar authentication failed:', error);
        showMessage('‚ùå L·ªói x√°c th·ª±c: ' + error.message, 'error');
    } finally {
        const authBtn = document.getElementById('calendarAuthBtn');
        if (authBtn) {
            authBtn.disabled = false;
            updateCalendarUI();
        }
    }
}

// Poll for authentication completion
function startAuthPolling() {
    const pollInterval = setInterval(async () => {
        await checkCalendarStatus();
        
        if (calendarStatus.authenticated && calendarStatus.status === 'ready') {
            clearInterval(pollInterval);
            showMessage('‚úÖ Google Calendar ƒë√£ ƒë∆∞·ª£c k·∫øt n·ªëi th√†nh c√¥ng!', 'success');
        }
    }, 3000); // Check every 3 seconds
    
    // Stop polling after 5 minutes
    setTimeout(() => {
        clearInterval(pollInterval);
    }, 300000);
}

// Get current user ID (simple implementation)
function getCurrentUserId() {
    let userId = localStorage.getItem('chatbot_user_id');
    if (!userId) {
        userId = 'user_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
        localStorage.setItem('chatbot_user_id', userId);
    }
    return userId;
}

// Check if message contains calendar intent
function hasCalendarIntent(message) {
    const calendarKeywords = [
        'l·ªãch', 'calendar', 'h·∫πn', 'cu·ªôc h·ªçp', 'meeting', 'deadline',
        'nh·∫Øc nh·ªü', 'remind', 'th·ªùi gian bi·ªÉu', 'schedule', 'k·∫ø ho·∫°ch',
        'plan', 's·ª± ki·ªán', 'event', 't·∫°o l·ªãch', 'ƒë·∫∑t l·ªãch', 'book',
        'ng√†y mai', 'tu·∫ßn sau', 'th√°ng sau', 'tomorrow', 'next week',
        'next month', 'h√¥m nay', 'today', 'ng√†y', 'gi·ªù', 'ph√∫t'
    ];
    
    const lowerMessage = message.toLowerCase();
    return calendarKeywords.some(keyword => lowerMessage.includes(keyword));
}

// Update calendar suggestions based on authentication status
function updateCalendarSuggestions() {
    const calendarSuggestions = document.querySelectorAll('.calendar-suggestion');
    
    calendarSuggestions.forEach(suggestion => {
        if (calendarStatus.authenticated && calendarStatus.status === 'ready') {
            suggestion.classList.remove('disabled');
            suggestion.style.pointerEvents = 'auto';
            suggestion.setAttribute('title', 'Click ƒë·ªÉ th·ª≠ t√≠nh nƒÉng l·ªãch');
        } else {
            suggestion.classList.add('disabled');
            suggestion.style.pointerEvents = 'none';
            suggestion.setAttribute('title', 'C·∫ßn k·∫øt n·ªëi Google Calendar ƒë·ªÉ s·ª≠ d·ª•ng');
        }
    });
}

// Handle OAuth callback (if opened in same window)
function handleOAuthCallback() {
    const urlParams = new URLSearchParams(window.location.search);
    const code = urlParams.get('code');
    const state = urlParams.get('state');
    
    if (code && state) {
        console.log('[DEBUG] OAuth callback detected');
        
        // Send the authorization code to backend
        fetch('/calendar/auth/callback', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            credentials: 'same-origin',
            body: JSON.stringify({
                code: code,
                user_id: state
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showMessage('‚úÖ Google Calendar ƒë√£ ƒë∆∞·ª£c k·∫øt n·ªëi th√†nh c√¥ng!', 'success');
                checkCalendarStatus();
                // Clean up URL
                window.history.replaceState({}, document.title, window.location.pathname);
            } else {
                showMessage('‚ùå L·ªói k·∫øt n·ªëi: ' + (data.message || 'Unknown error'), 'error');
            }
        })
        .catch(error => {
            console.error('[ERROR] OAuth callback failed:', error);
            showMessage('‚ùå L·ªói x·ª≠ l√Ω callback: ' + error.message, 'error');
        });
    }
}
