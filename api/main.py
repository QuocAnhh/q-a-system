from flask import Flask, request, jsonify, session, send_from_directory, send_file
from flask_cors import CORS
import os
from datetime import datetime

from config import Config
from session_manager import (
    get_user_data, save_user_data, create_new_conversation, 
    get_current_conversation, switch_conversation, add_message_to_conversation,
    get_conversation_history, delete_conversation
)
from ai_handlers import handle_ai_question
from utils import handle_deadline_commands, handle_calendar_commands, handle_document_search

app = Flask(__name__)
CORS(app)
app.secret_key = Config.SECRET_KEY


@app.route("/")
def index():
    """Serve trang ch·ªß"""
    try:
        frontend_path = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'frontend', 'index.html')
        return send_file(frontend_path)
    except Exception as e:
        return f"L·ªói: {e}", 500


@app.route("/<path:filename>")
def serve_frontend_files(filename):
    """Serve c√°c file frontend"""
    try:
        frontend_path = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'frontend')
        return send_from_directory(frontend_path, filename)
    except Exception as e:
        return f"File kh√¥ng t√¨m th·∫•y: {e}", 404


@app.route("/static/<path:filename>")
def serve_static(filename):
    """Serve c√°c file static"""
    try:
        frontend_path = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'frontend')
        return send_from_directory(frontend_path, filename)
    except Exception as e:
        return f"File kh√¥ng t√¨m th·∫•y: {e}", 404


@app.route("/health", methods=["GET"])
def health_check():
    """Health check endpoint"""
    return jsonify({"status": "healthy", "timestamp": datetime.now().isoformat()})


@app.route("/chat", methods=["POST"])
def chat():
    """Main chat endpoint"""
    try:
        data = request.json
        if not data:
            return jsonify({"error": "Kh√¥ng c√≥ d·ªØ li·ªáu ƒë∆∞·ª£c g·ª≠i"}), 400
            
        question = data.get("question", "").strip()
        
        if not question:
            return jsonify({"error": "B·∫°n ch∆∞a nh·∫≠p c√¢u h·ªèi!"}), 400
        
        # X·ª≠ l√Ω c√¢u h·ªèi v√† tr·∫£ v·ªÅ ph·∫£n h·ªìi
        response = process_question(question)
        
        # L∆∞u v√†o cu·ªôc h·ªôi tho·∫°i hi·ªán t·∫°i
        message = add_message_to_conversation(question, response["answer"], response.get("ai_mode"))
        
        return jsonify({
            "answer": response["answer"],
            "suggestions": response.get("suggestions", []),
            "calendar_events": response.get("calendar_events", []),
            "ai_mode": response.get("ai_mode", None),
            "timestamp": datetime.now().isoformat()
        })
        
    except Exception as e:
        print(f"Error in chat endpoint: {e}")
        import traceback
        traceback.print_exc()
        return jsonify({"error": "C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω y√™u c·∫ßu"}), 500


@app.route("/conversations", methods=["GET"])
def get_conversations():
    """L·∫•y danh s√°ch t·∫•t c·∫£ cu·ªôc h·ªôi tho·∫°i"""
    try:
        conversations = get_conversation_history()
        return jsonify({
            "conversations": conversations,
            "timestamp": datetime.now().isoformat()
        })
    except Exception as e:
        print(f"Error getting conversations: {e}")
        return jsonify({"error": "Kh√¥ng th·ªÉ l·∫•y danh s√°ch cu·ªôc h·ªôi tho·∫°i"}), 500


@app.route("/conversations/new", methods=["POST"])
def new_conversation():
    """T·∫°o cu·ªôc h·ªôi tho·∫°i m·ªõi"""
    try:
        conversation = create_new_conversation()
        return jsonify({
            "conversation": conversation,
            "message": "ƒê√£ t·∫°o cu·ªôc h·ªôi tho·∫°i m·ªõi",
            "timestamp": datetime.now().isoformat()
        })
    except Exception as e:
        print(f"Error creating new conversation: {e}")
        return jsonify({"error": "Kh√¥ng th·ªÉ t·∫°o cu·ªôc h·ªôi tho·∫°i m·ªõi"}), 500


@app.route("/conversations/<conversation_id>", methods=["GET"])
def get_conversation(conversation_id):
    """L·∫•y chi ti·∫øt m·ªôt cu·ªôc h·ªôi tho·∫°i"""
    try:
        conversation = switch_conversation(conversation_id)
        if conversation:
            return jsonify({
                "conversation": conversation,
                "timestamp": datetime.now().isoformat()
            })
        else:
            return jsonify({"error": "Kh√¥ng t√¨m th·∫•y cu·ªôc h·ªôi tho·∫°i"}), 404
    except Exception as e:
        print(f"Error getting conversation: {e}")
        return jsonify({"error": "Kh√¥ng th·ªÉ l·∫•y cu·ªôc h·ªôi tho·∫°i"}), 500


@app.route("/conversations/<conversation_id>", methods=["DELETE"])
def remove_conversation(conversation_id):
    """X√≥a m·ªôt cu·ªôc h·ªôi tho·∫°i"""
    try:
        success = delete_conversation(conversation_id)
        if success:
            return jsonify({
                "message": "ƒê√£ x√≥a cu·ªôc h·ªôi tho·∫°i",
                "timestamp": datetime.now().isoformat()
            })
        else:
            return jsonify({"error": "Kh√¥ng t√¨m th·∫•y cu·ªôc h·ªôi tho·∫°i"}), 404
    except Exception as e:
        print(f"Error deleting conversation: {e}")
        return jsonify({"error": "Kh√¥ng th·ªÉ x√≥a cu·ªôc h·ªôi tho·∫°i"}), 500


@app.route("/conversations/<conversation_id>/switch", methods=["POST"])
def switch_to_conversation(conversation_id):
    """Chuy·ªÉn sang cu·ªôc h·ªôi tho·∫°i kh√°c"""
    try:
        conversation = switch_conversation(conversation_id)
        if conversation:
            return jsonify({
                "conversation": conversation,
                "message": "ƒê√£ chuy·ªÉn sang cu·ªôc h·ªôi tho·∫°i kh√°c",
                "timestamp": datetime.now().isoformat()
            })
        else:
            return jsonify({"error": "Kh√¥ng t√¨m th·∫•y cu·ªôc h·ªôi tho·∫°i"}), 404
    except Exception as e:
        print(f"Error switching conversation: {e}")
        return jsonify({"error": "Kh√¥ng th·ªÉ chuy·ªÉn cu·ªôc h·ªôi tho·∫°i"}), 500


# ph·∫ßn x·ª≠ l√Ω logic ch√≠nh
def process_question(question):
    """X·ª≠ l√Ω c√¢u h·ªèi t·ª´ ng∆∞·ªùi d√πng"""
    q = question.lower().strip()
    user_data = get_user_data()
    
    # x·ª≠ l√Ω deadline commands
    if 'deadline' in q:
        return handle_deadline_commands(question, user_data)
    
    # x·ª≠ l√Ω calendar commands
    if any(keyword in q for keyword in ['l·ªãch', 'calendar', 'th√™m l·ªãch']):
        return handle_calendar_commands(question, user_data)
    
    # x·ª≠ l√Ω t√¨m ki·∫øm t√†i li·ªáu
    if any(keyword in q for keyword in ['t√†i li·ªáu', 'h·ªçc', 't√¨m', 'search']):
        return handle_document_search(question, user_data)
    
    # x·ª≠ l√Ω general commands
    return handle_general_commands(question, user_data)


def handle_general_commands(question, user_data):
    """X·ª≠ l√Ω c√°c l·ªánh chung v√† c√¢u h·ªèi AI"""
    q = question.lower()
    
    if any(keyword in q for keyword in ['xin ch√†o', 'hello', 'hi', 'ch√†o']):
        return {
            "answer": "üëã Xin ch√†o! T√¥i l√† tr·ª£ l√Ω h·ªçc t·∫≠p th√¥ng minh. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:<br>‚Ä¢ üìÖ Qu·∫£n l√Ω l·ªãch h·ªçc v√† deadline<br>‚Ä¢ üìö T√¨m t√†i li·ªáu v√† gi·∫£i th√≠ch ki·∫øn th·ª©c<br>‚Ä¢ ü§ñ Tr·∫£ l·ªùi c√°c c√¢u h·ªèi h·ªçc t·∫≠p<br>‚Ä¢ üí° ƒê∆∞a ra l·ªùi khuy√™n v√† g·ª£i √Ω h·ªçc t·∫≠p",
            "suggestions": ["Gi·∫£i th√≠ch v·ªÅ Python", "C√¥ng th·ª©c To√°n", "L·ªãch s·ª≠ Vi·ªát Nam", "M·∫πo h·ªçc t·∫≠p"]
        }
    
    if any(keyword in q for keyword in ['gi√∫p', 'help', 'h∆∞·ªõng d·∫´n']):
        return {
            "answer": """
                üìñ <strong>H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:</strong><br><br>
                <strong>ü§ñ H·ªèi ƒë√°p AI h·ªçc t·∫≠p:</strong><br>
                ‚Ä¢ H·ªèi b·∫•t k·ª≥ c√¢u h·ªèi n√†o v·ªÅ h·ªçc t·∫≠p<br>
                ‚Ä¢ Gi·∫£i th√≠ch kh√°i ni·ªám, c√¥ng th·ª©c c√°c m√¥n h·ªçc<br>
                ‚Ä¢ H∆∞·ªõng d·∫´n c√°ch l√†m b√†i t·∫≠p<br>
                ‚Ä¢ M·∫πo v√† ph∆∞∆°ng ph√°p h·ªçc t·∫≠p hi·ªáu qu·∫£<br><br>
                
                <strong>üóìÔ∏è Qu·∫£n l√Ω deadline:</strong><br>
                ‚Ä¢ "deadline" - Xem t·∫•t c·∫£ deadline<br>
                ‚Ä¢ "th√™m deadline To√°n 2024-12-25" - Th√™m deadline m·ªõi<br>
                ‚Ä¢ "x√≥a deadline To√°n" - X√≥a deadline<br><br>
                
                <strong>üìÖ Qu·∫£n l√Ω l·ªãch h·ªçc:</strong><br>
                ‚Ä¢ "l·ªãch h√¥m nay" - Xem l·ªãch h√¥m nay<br>
                ‚Ä¢ "l·ªãch tu·∫ßn n√†y" - Xem l·ªãch tu·∫ßn<br><br>
                
                <strong>üìö T√¨m t√†i li·ªáu:</strong><br>
                ‚Ä¢ "t√¨m t√†i li·ªáu Python" - T√¨m t√†i li·ªáu h·ªçc t·∫≠p<br>
            """,
            "suggestions": ["H·ªèi v·ªÅ To√°n", "Gi·∫£i th√≠ch V·∫≠t l√Ω", "L·∫≠p tr√¨nh Python", "M·∫πo √¥n thi"]
        }
    
    return handle_ai_question(question)


if __name__ == "__main__":
    app.run(debug=True, host="0.0.0.0", port=5000)
