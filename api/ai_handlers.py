
import openai
from datetime import datetime
from config import SYSTEM_PROMPTS, Config
from session_manager import set_ai_mode, get_ai_mode, add_message_to_conversation

openai.api_key = Config.OPENAI_API_KEY


def call_openai_api(question, system_prompt, subject):
    """G·ªçi OpenAI API v·ªõi system prompt"""
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": question}
            ],
            max_tokens=1000,
            temperature=0.7
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        print(f"OpenAI API Error: {e}")
        return f"Hi·ªán t·∫°i c√≥ l·ªói k·∫øt n·ªëi v·ªõi AI. Vui l√≤ng th·ª≠ l·∫°i sau. Chi ti·∫øt l·ªói: {str(e)}"


def handle_ai_question(question):
    """X·ª≠ l√Ω c√¢u h·ªèi AI th√¥ng minh"""
    q = question.lower()
    
    if any(keyword in q for keyword in ['to√°n', 'math', 'c√¥ng th·ª©c', 't√≠nh', 'ph∆∞∆°ng tr√¨nh']):
        return handle_math_questions(question)
    
    if any(keyword in q for keyword in ['v·∫≠t l√Ω', 'physics', 'l·ª±c', 'nƒÉng l∆∞·ª£ng', 't·ªëc ƒë·ªô']):
        return handle_physics_questions(question)
    
    if any(keyword in q for keyword in ['h√≥a h·ªçc', 'chemistry', 'ph·∫£n ·ª©ng', 'nguy√™n t·ªë']):
        return handle_chemistry_questions(question)
    
    if any(keyword in q for keyword in ['l·∫≠p tr√¨nh', 'programming', 'code', 'python', 'javascript']):
        return handle_programming_questions(question)
    
    if any(keyword in q for keyword in ['l·ªãch s·ª≠', 'history', 'vi·ªát nam', 'th·∫ø gi·ªõi']):
        return handle_history_questions(question)
    
    if any(keyword in q for keyword in ['ti·∫øng anh', 'english', 'grammar', 'vocabulary']):
        return handle_english_questions(question)
    
    if any(keyword in q for keyword in ['h·ªçc', '√¥n thi', 'thi c·ª≠', 'ki·ªÉm tra', 'm·∫πo', 'ph∆∞∆°ng ph√°p']):
        return handle_study_questions(question)
    
    if any(keyword in q for keyword in ['th·ªùi gian', 'k·∫ø ho·∫°ch', 'l·ªãch tr√¨nh', 'qu·∫£n l√Ω']):
        return handle_time_management_questions(question)
    
    try:
        # S·ª≠ d·ª•ng system prompt chung cho gi√°o d·ª•c
        general_prompt = """B·∫°n l√† m·ªôt tr·ª£ l√Ω h·ªçc t·∫≠p th√¥ng minh, th√¢n thi·ªán v√† hi·ªÉu bi·∫øt r·ªông.
        Nhi·ªám v·ª• c·ªßa b·∫°n l√†:
        - Tr·∫£ l·ªùi c√°c c√¢u h·ªèi h·ªçc t·∫≠p m·ªôt c√°ch ch√≠nh x√°c v√† d·ªÖ hi·ªÉu
        - ƒê∆∞a ra l·ªùi khuy√™n h·ªçc t·∫≠p ph√π h·ª£p
        - Khuy·∫øn kh√≠ch tinh th·∫ßn ham h·ªçc h·ªèi
        - Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, s·ª≠ d·ª•ng HTML formatting cho c√¢u tr·∫£ l·ªùi ƒë·∫πp
        - Lu√¥n t√≠ch c·ª±c v√† h·ªó tr·ª£ h·ªçc sinh"""
        
        ai_response = call_openai_api(question, general_prompt, "H·ªçc t·∫≠p chung")
        
        return {
            "answer": ai_response,
            "suggestions": ["H·ªèi v·ªÅ m√¥n h·ªçc c·ª• th·ªÉ", "Ph∆∞∆°ng ph√°p h·ªçc t·∫≠p", "Qu·∫£n l√Ω th·ªùi gian", "T√¨m t√†i li·ªáu"],
            "ai_mode": "general"
        }
        
    except Exception as e:
        # Fallback message n·∫øu API l·ªói
        return {
            "answer": f"""ü§ñ T√¥i hi·ªÉu b·∫°n ƒëang h·ªèi v·ªÅ: "{question}"
            
            <strong>üí° G·ª£i √Ω:</strong><br>
            ‚Ä¢ H√£y h·ªèi c·ª• th·ªÉ h∆°n v·ªÅ m√¥n h·ªçc b·∫°n quan t√¢m<br>
            ‚Ä¢ T√¥i c√≥ th·ªÉ gi·∫£i th√≠ch c√°c kh√°i ni·ªám v·ªÅ To√°n, V·∫≠t l√Ω, H√≥a h·ªçc, L·∫≠p tr√¨nh...<br>
            ‚Ä¢ Ho·∫∑c h·ªèi v·ªÅ c√°ch qu·∫£n l√Ω th·ªùi gian h·ªçc t·∫≠p hi·ªáu qu·∫£<br><br>
            
            <strong>V√≠ d·ª•:</strong><br>
            ‚Ä¢ "Gi·∫£i th√≠ch ƒë·ªãnh l√Ω Pythagore"<br>
            ‚Ä¢ "C√¥ng th·ª©c t√≠nh v·∫≠n t·ªëc trong v·∫≠t l√Ω"<br>
            ‚Ä¢ "C√°ch h·ªçc Python cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu"<br>
            ‚Ä¢ "L√†m th·∫ø n√†o ƒë·ªÉ √¥n thi hi·ªáu qu·∫£?"<br><br>
            
            <em>L∆∞u √Ω: Hi·ªán ƒëang c√≥ v·∫•n ƒë·ªÅ v·ªõi AI, t√¥i s·∫Ω c·ªë g·∫Øng h·ªó tr·ª£ b·∫°n t·ªët nh·∫•t c√≥ th·ªÉ!</em>
            """,
            "suggestions": ["H·ªèi v·ªÅ To√°n", "H·ªèi v·ªÅ V·∫≠t l√Ω", "H·ªèi v·ªÅ L·∫≠p tr√¨nh", "M·∫πo h·ªçc t·∫≠p"]
        }


def handle_math_questions(question):
    """X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ To√°n h·ªçc b·∫±ng AI th·ª±c s·ª±"""
    set_ai_mode("math")
    try:
        ai_response = call_openai_api(question, SYSTEM_PROMPTS['math'], "To√°n h·ªçc")
        
        return {
            "answer": ai_response,
            "suggestions": ["H·ªèi th√™m v·ªÅ To√°n", "B√†i t·∫≠p th·ª±c h√†nh", "V√≠ d·ª• c·ª• th·ªÉ", "Chuy·ªÉn sang m√¥n kh√°c"],
            "ai_mode": "math"
        }
    except Exception as e:
        return {
            "answer": """üßÆ <strong>To√°n h·ªçc</strong><br><br>
            Xin l·ªói, hi·ªán t·∫°i c√≥ l·ªói k·∫øt n·ªëi v·ªõi AI To√°n h·ªçc. Tuy nhi√™n, t√¥i v·∫´n c√≥ th·ªÉ h·ªó tr·ª£ b·∫°n v·ªõi c√°c c√¥ng th·ª©c c∆° b·∫£n:<br><br>
            
            <strong>üìê H√¨nh h·ªçc:</strong><br>
            ‚Ä¢ Di·ªán t√≠ch h√¨nh vu√¥ng: <span class="formula">S = a¬≤</span><br>
            ‚Ä¢ Di·ªán t√≠ch h√¨nh tr√≤n: <span class="formula">S = œÄr¬≤</span><br>
            ‚Ä¢ ƒê·ªãnh l√Ω Pythagore: <span class="formula">a¬≤ + b¬≤ = c¬≤</span><br><br>
            
            <strong>üìä ƒê·∫°i s·ªë:</strong><br>
            ‚Ä¢ C√¥ng th·ª©c nghi·ªám b·∫≠c 2: <span class="formula">x = (-b ¬± ‚àö(b¬≤-4ac))/2a</span><br>
            ‚Ä¢ H·∫±ng ƒë·∫≥ng th·ª©c: <span class="formula">(a+b)¬≤ = a¬≤ + 2ab + b¬≤</span><br><br>
            
            H√£y h·ªèi c√¢u h·ªèi c·ª• th·ªÉ ƒë·ªÉ t√¥i c√≥ th·ªÉ h·ªó tr·ª£ t·ªët h∆°n!""",
            "suggestions": ["C√¥ng th·ª©c h√¨nh h·ªçc", "Gi·∫£i ph∆∞∆°ng tr√¨nh", "B√†i t·∫≠p th·ª±c h√†nh", "Chuy·ªÉn sang m√¥n kh√°c"],
            "ai_mode": "math"
        }


def handle_physics_questions(question):
    """X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ V·∫≠t l√Ω b·∫±ng AI th·ª±c s·ª±"""
    set_ai_mode("physics")
    
    try:
        ai_response = call_openai_api(question, SYSTEM_PROMPTS['physics'], "V·∫≠t l√Ω")
        
        return {
            "answer": ai_response,
            "suggestions": ["H·ªèi th√™m v·ªÅ V·∫≠t l√Ω", "Th√≠ nghi·ªám th·ª±c t·∫ø", "V√≠ d·ª• ·ª©ng d·ª•ng", "Chuy·ªÉn sang m√¥n kh√°c"],
            "ai_mode": "physics"
        }
    except Exception as e:
        return {
            "answer": """‚ö° <strong>V·∫≠t l√Ω</strong><br><br>
            Xin l·ªói, hi·ªán t·∫°i c√≥ l·ªói k·∫øt n·ªëi v·ªõi AI V·∫≠t l√Ω. Tuy nhi√™n, ƒë√¢y l√† m·ªôt s·ªë c√¥ng th·ª©c c∆° b·∫£n:<br><br>
            
            <strong>üèÉ C∆° h·ªçc:</strong><br>
            ‚Ä¢ L·ª±c: <span class="formula">F = ma</span><br>
            ‚Ä¢ V·∫≠n t·ªëc: <span class="formula">v = s/t</span><br>
            ‚Ä¢ Gia t·ªëc: <span class="formula">a = Œîv/Œît</span><br><br>
            
            <strong>‚ö° ƒêi·ªán h·ªçc:</strong><br>
            ‚Ä¢ ƒê·ªãnh lu·∫≠t Ohm: <span class="formula">V = IR</span><br>
            ‚Ä¢ C√¥ng su·∫•t: <span class="formula">P = VI</span><br><br>
            
            <strong>üåä S√≥ng:</strong><br>
            ‚Ä¢ V·∫≠n t·ªëc s√≥ng: <span class="formula">v = fŒª</span><br><br>
            
            H√£y h·ªèi v·ªÅ hi·ªán t∆∞·ª£ng v·∫≠t l√Ω c·ª• th·ªÉ!""",
            "suggestions": ["C∆° h·ªçc", "ƒêi·ªán h·ªçc", "Quang h·ªçc", "Th√≠ nghi·ªám"],
            "ai_mode": "physics"
        }


def handle_programming_questions(question):
    """X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ L·∫≠p tr√¨nh b·∫±ng AI th·ª±c s·ª±"""
    set_ai_mode("programming")
    
    try:
        ai_response = call_openai_api(question, SYSTEM_PROMPTS['programming'], "L·∫≠p tr√¨nh")
        
        return {
            "answer": ai_response,
            "suggestions": ["Code examples", "Best practices", "Debugging tips", "Chuy·ªÉn sang m√¥n kh√°c"],
            "ai_mode": "programming"
        }
    except Exception as e:
        return {
            "answer": """üíª <strong>L·∫≠p tr√¨nh</strong><br><br>
            Xin l·ªói, hi·ªán t·∫°i c√≥ l·ªói k·∫øt n·ªëi v·ªõi AI l·∫≠p tr√¨nh. Tuy nhi√™n, ƒë√¢y l√† m·ªôt s·ªë v√≠ d·ª• c∆° b·∫£n:<br><br>
            
            <strong>üêç Python c∆° b·∫£n:</strong><br>
            <div class="code-block">
            <div class="code-header">Python</div>
            <div class="code-content">
            # In ra "Hello World"<br>
            print("Hello, World!")<br><br>
            
            # V√≤ng l·∫∑p for<br>
            for i in range(5):<br>
            &nbsp;&nbsp;&nbsp;&nbsp;print(f"S·ªë {i}")
            </div>
            </div><br>
            
            <strong>üìö T√†i nguy√™n h·ªçc t·∫≠p:</strong><br>
            ‚Ä¢ Python.org - T√†i li·ªáu ch√≠nh th·ª©c<br>
            ‚Ä¢ W3Schools - Tutorial t·ª´ c∆° b·∫£n<br>
            ‚Ä¢ GitHub - C√°c d·ª± √°n m·∫´u<br><br>
            
            H√£y h·ªèi v·ªÅ ng√¥n ng·ªØ l·∫≠p tr√¨nh c·ª• th·ªÉ!""",
            "suggestions": ["Python basics", "JavaScript", "Web development", "Algorithms"],
            "ai_mode": "programming"
        }


def handle_chemistry_questions(question):
    """X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ H√≥a h·ªçc"""
    set_ai_mode("chemistry")
    
    return {
        "answer": """üß™ <strong>H√≥a h·ªçc</strong><br><br>
        <strong>‚öõÔ∏è B·∫£ng tu·∫ßn ho√†n:</strong><br>
        ‚Ä¢ Hydro (H): Nguy√™n t·ª≠ s·ªë 1<br>
        ‚Ä¢ Carbon (C): Nguy√™n t·ª≠ s·ªë 6<br>
        ‚Ä¢ Oxygen (O): Nguy√™n t·ª≠ s·ªë 8<br><br>
        
        <strong>üî¨ Ph·∫£n ·ª©ng c∆° b·∫£n:</strong><br>
        ‚Ä¢ Ph·∫£n ·ª©ng ch√°y: <span class="formula">C + O‚ÇÇ ‚Üí CO‚ÇÇ</span><br>
        ‚Ä¢ Ph·∫£n ·ª©ng acid-base: <span class="formula">HCl + NaOH ‚Üí NaCl + H‚ÇÇO</span><br><br>
        
        <strong>‚öñÔ∏è ƒê·ªãnh lu·∫≠t b·∫£o to√†n kh·ªëi l∆∞·ª£ng:</strong><br>
        Kh·ªëi l∆∞·ª£ng ch·∫•t tham gia = Kh·ªëi l∆∞·ª£ng s·∫£n ph·∫©m<br><br>
        
        H√£y h·ªèi v·ªÅ ph·∫£n ·ª©ng h√≥a h·ªçc c·ª• th·ªÉ!""",
        "suggestions": ["Ph·∫£n ·ª©ng h√≥a h·ªçc", "B·∫£ng tu·∫ßn ho√†n", "Ph√¢n t√≠ch ƒë·ªãnh l∆∞·ª£ng", "H√≥a h·ªØu c∆°"],
        "ai_mode": "chemistry"
    }


def handle_history_questions(question):
    """X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ L·ªãch s·ª≠"""
    set_ai_mode("history")
    
    return {
        "answer": """üìö <strong>L·ªãch s·ª≠</strong><br><br>
        <strong>üáªüá≥ L·ªãch s·ª≠ Vi·ªát Nam:</strong><br>
        ‚Ä¢ Kh·ªüi nghƒ©a Hai B√† Tr∆∞ng (40-43)<br>
        ‚Ä¢ Kh·ªüi nghƒ©a L√Ω B√≠ (544-548)<br>
        ‚Ä¢ Th·∫Øng l·ª£i B·∫°ch ƒê·∫±ng (938)<br>
        ‚Ä¢ C√°ch m·∫°ng Th√°ng T√°m (1945)<br><br>
        
        <strong>üåç L·ªãch s·ª≠ th·∫ø gi·ªõi:</strong><br>
        ‚Ä¢ C√°ch m·∫°ng c√¥ng nghi·ªáp (1760-1840)<br>
        ‚Ä¢ ƒê·∫°i chi·∫øn th·∫ø gi·ªõi I (1914-1918)<br>
        ‚Ä¢ ƒê·∫°i chi·∫øn th·∫ø gi·ªõi II (1939-1945)<br><br>
        
        H√£y h·ªèi v·ªÅ giai ƒëo·∫°n l·ªãch s·ª≠ c·ª• th·ªÉ!""",
        "suggestions": ["L·ªãch s·ª≠ Vi·ªát Nam", "L·ªãch s·ª≠ th·∫ø gi·ªõi", "Nh√¢n v·∫≠t l·ªãch s·ª≠", "S·ª± ki·ªán quan tr·ªçng"],
        "ai_mode": "history"
    }


def handle_english_questions(question):
    """X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ Ti·∫øng Anh"""
    set_ai_mode("english")
    
    return {
        "answer": """üá¨üáß <strong>English Learning</strong><br><br>
        <strong>üìñ Grammar Basics:</strong><br>
        ‚Ä¢ Present Simple: I eat, He eats<br>
        ‚Ä¢ Past Simple: I ate, He ate<br>
        ‚Ä¢ Future: I will eat, He will eat<br><br>
        
        <strong>üìù Common Phrases:</strong><br>
        ‚Ä¢ How are you? - B·∫°n c√≥ kh·ªèe kh√¥ng?<br>
        ‚Ä¢ Nice to meet you - R·∫•t vui ƒë∆∞·ª£c g·∫∑p b·∫°n<br>
        ‚Ä¢ Thank you - C·∫£m ∆°n<br><br>
        
        <strong>üí° Study Tips:</strong><br>
        ‚Ä¢ ƒê·ªçc s√°ch ti·∫øng Anh ƒë∆°n gi·∫£n<br>
        ‚Ä¢ Xem phim c√≥ ph·ª• ƒë·ªÅ<br>
        ‚Ä¢ Luy·ªán n√≥i m·ªói ng√†y<br><br>
        
        Ask me specific English questions!""",
        "suggestions": ["Grammar rules", "Vocabulary", "Pronunciation", "Conversation practice"],
        "ai_mode": "english"
    }


def handle_study_questions(question):
    """X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ ph∆∞∆°ng ph√°p h·ªçc t·∫≠p"""
    set_ai_mode("study")
    
    try:
        ai_response = call_openai_api(question, SYSTEM_PROMPTS['study'], "Ph∆∞∆°ng ph√°p h·ªçc t·∫≠p")
        
        return {
            "answer": ai_response,
            "suggestions": ["K·ªπ thu·∫≠t ghi nh·ªõ", "Qu·∫£n l√Ω th·ªùi gian", "Gi·∫£m stress", "L·∫≠p k·∫ø ho·∫°ch h·ªçc t·∫≠p"],
            "ai_mode": "study"
        }
    except Exception as e:
        return {
            "answer": """üìö <strong>Ph∆∞∆°ng ph√°p h·ªçc t·∫≠p hi·ªáu qu·∫£</strong><br><br>
            
            <strong>üéØ K·ªπ thu·∫≠t Pomodoro:</strong><br>
            ‚Ä¢ H·ªçc 25 ph√∫t, ngh·ªâ 5 ph√∫t<br>
            ‚Ä¢ Sau 4 l·∫ßn, ngh·ªâ 15-30 ph√∫t<br><br>
            
            <strong>üìù Ghi ch√∫ hi·ªáu qu·∫£:</strong><br>
            ‚Ä¢ S·ª≠ d·ª•ng s∆° ƒë·ªì t∆∞ duy (Mind Map)<br>
            ‚Ä¢ Ghi ch√∫ Cornell Method<br>
            ‚Ä¢ Highlight c√°c √Ω ch√≠nh<br><br>
            
            <strong>üß† K·ªπ thu·∫≠t ghi nh·ªõ:</strong><br>
            ‚Ä¢ L·∫∑p l·∫°i c√°ch qu√£ng (Spaced Repetition)<br>
            ‚Ä¢ Li√™n k·∫øt th√¥ng tin m·ªõi v·ªõi ki·∫øn th·ª©c c≈©<br>
            ‚Ä¢ Th·ª±c h√†nh active recall<br><br>
            
            <strong>‚è∞ Qu·∫£n l√Ω th·ªùi gian:</strong><br>
            ‚Ä¢ L·∫≠p danh s√°ch vi·ªác c·∫ßn l√†m<br>
            ‚Ä¢ ∆Øu ti√™n c√¥ng vi·ªác quan tr·ªçng<br>
            ‚Ä¢ T·∫°o th√≥i quen h·ªçc t·∫≠p ƒë·ªÅu ƒë·∫∑n""",
            "suggestions": ["K·ªπ thu·∫≠t ghi nh·ªõ", "Qu·∫£n l√Ω th·ªùi gian", "Gi·∫£m stress", "L·∫≠p k·∫ø ho·∫°ch"],
            "ai_mode": "study"
        }


def handle_time_management_questions(question):
    """X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ qu·∫£n l√Ω th·ªùi gian"""
    set_ai_mode("time_management")
    
    return {
        "answer": """‚è∞ <strong>Qu·∫£n l√Ω th·ªùi gian hi·ªáu qu·∫£</strong><br><br>
        
        <strong>üìÖ L·∫≠p k·∫ø ho·∫°ch h√†ng ng√†y:</strong><br>
        ‚Ä¢ Vi·∫øt ra 3 vi·ªác quan tr·ªçng nh·∫•t<br>
        ‚Ä¢ ∆Ø·ªõc t√≠nh th·ªùi gian cho m·ªói vi·ªác<br>
        ‚Ä¢ B·∫Øt ƒë·∫ßu v·ªõi vi·ªác kh√≥ nh·∫•t<br><br>
        
        <strong>üéØ Ma tr·∫≠n Eisenhower:</strong><br>
        ‚Ä¢ Quan tr·ªçng + G·∫•p = L√†m ngay<br>
        ‚Ä¢ Quan tr·ªçng + Kh√¥ng g·∫•p = L√™n k·∫ø ho·∫°ch<br>
        ‚Ä¢ Kh√¥ng quan tr·ªçng + G·∫•p = ·ª¶y th√°c<br>
        ‚Ä¢ Kh√¥ng quan tr·ªçng + Kh√¥ng g·∫•p = Lo·∫°i b·ªè<br><br>
        
        <strong>‚ö° Tips nhanh:</strong><br>
        ‚Ä¢ T·∫Øt th√¥ng b√°o khi h·ªçc<br>
        ‚Ä¢ Chu·∫©n b·ªã m·ªçi th·ª© t·ª´ t·ªëi h√¥m tr∆∞·ªõc<br>
        ‚Ä¢ Ngh·ªâ ng∆°i ƒë√∫ng c√°ch<br>
        ‚Ä¢ Th∆∞·ªüng cho b·∫£n th√¢n khi ho√†n th√†nh m·ª•c ti√™u""",
        "suggestions": ["L·∫≠p k·∫ø ho·∫°ch h·ªçc t·∫≠p", "∆Øu ti√™n c√¥ng vi·ªác", "Lo·∫°i b·ªè ph√¢n t√¢m", "T·∫°o th√≥i quen"],
        "ai_mode": "time_management"
    }
