import openai
from datetime import datetime
from config import SYSTEM_PROMPTS, Config

openai.api_key = Config.OPENAI_API_KEY


def call_openai_api(question, system_prompt, subject):
    """G·ªçi OpenAI API v·ªõi prompt ƒë∆°n gi·∫£n v√† t·∫≠p trung"""
    try:
        print(f"[DEBUG] call_openai_api called for subject: {subject}")
        print(f"[DEBUG] Question: {question}")
        
        # ƒê∆°n gi·∫£n h√≥a system prompt - ch·ªâ t·∫≠p trung v√†o c√¢u h·ªèi hi·ªán t·∫°i
        focused_prompt = f"""{system_prompt}

NHI·ªÜM V·ª§: Tr·∫£ l·ªùi tr·ª±c ti·∫øp c√¢u h·ªèi "{question}" m·ªôt c√°ch ch√≠nh x√°c v√† chi ti·∫øt.
S·ª≠ d·ª•ng HTML formatting ƒë·ªÉ c√¢u tr·∫£ l·ªùi ƒë·∫πp m·∫Øt."""
        
        messages = [
            {"role": "system", "content": focused_prompt},
            {"role": "user", "content": question}
        ]
        
        print(f"[DEBUG] Sending request to OpenAI with {len(messages)} messages")
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=messages,
            max_tokens=1000,
            temperature=0.3,  # Gi·∫£m temperature ƒë·ªÉ c√≥ c√¢u tr·∫£ l·ªùi t·∫≠p trung h∆°n
        )
        
        answer = response.choices[0].message.content.strip()
        print(f"[DEBUG] OpenAI response received: {answer[:100]}...")
        
        return answer
    except Exception as e:
        print(f"[ERROR] OpenAI API Error: {e}")
        return f"Hi·ªán t·∫°i c√≥ l·ªói k·∫øt n·ªëi v·ªõi AI. Vui l√≤ng th·ª≠ l·∫°i sau. Chi ti·∫øt l·ªói: {str(e)}"


def handle_ai_question(question):
    """X·ª≠ l√Ω c√¢u h·ªèi AI th√¥ng minh v·ªõi logic detect ƒë∆∞·ª£c c·∫£i thi·ªán"""
    q = question.lower()
    print(f"[DEBUG] handle_ai_question called with: {question}")
    
    # QUAN TR·ªåNG: Ki·ªÉm tra programming tr∆∞·ªõc v√¨ "thu·∫≠t to√°n" ch·ª©a "to√°n"
    if any(keyword in q for keyword in ['l·∫≠p tr√¨nh', 'programming', 'code', 'python', 'javascript', 'thu·∫≠t to√°n', 'algorithm', 'decision tree', 'machine learning', 'ai']):
        print(f"[DEBUG] Detected programming keywords, routing to handle_programming_questions")
        return handle_programming_questions(question)
    
    # Ki·ªÉm tra math sau, nh∆∞ng lo·∫°i tr·ª´ tr∆∞·ªùng h·ª£p l√† thu·∫≠t to√°n
    if any(keyword in q for keyword in ['to√°n', 'math', 'c√¥ng th·ª©c', 't√≠nh', 'ph∆∞∆°ng tr√¨nh']) and 'thu·∫≠t to√°n' not in q and 'algorithm' not in q:
        print(f"[DEBUG] Detected math keywords, routing to handle_math_questions")
        return handle_math_questions(question)
    
    if any(keyword in q for keyword in ['v·∫≠t l√Ω', 'physics', 'l·ª±c', 'nƒÉng l∆∞·ª£ng', 't·ªëc ƒë·ªô']):
        return handle_physics_questions(question)
    
    if any(keyword in q for keyword in ['h√≥a h·ªçc', 'chemistry', 'ph·∫£n ·ª©ng', 'nguy√™n t·ªë']):
        return handle_chemistry_questions(question)
    
    if any(keyword in q for keyword in ['l·ªãch s·ª≠', 'history', 'vi·ªát nam', 'th·∫ø gi·ªõi']):
        return handle_history_questions(question)
    
    if any(keyword in q for keyword in ['ti·∫øng anh', 'english', 'grammar', 'vocabulary']):
        return handle_english_questions(question)
    
    if any(keyword in q for keyword in ['h·ªçc', '√¥n thi', 'thi c·ª≠', 'ki·ªÉm tra', 'm·∫πo', 'ph∆∞∆°ng ph√°p']):
        return handle_study_questions(question)
    
    if any(keyword in q for keyword in ['th·ªùi gian', 'k·∫ø ho·∫°ch', 'l·ªãch tr√¨nh', 'qu·∫£n l√Ω']):
        return handle_time_management_questions(question)
    
    # General fallback v·ªõi prompt ƒë∆°n gi·∫£n
    try:        
        general_prompt = """B·∫°n l√† tr·ª£ l√Ω h·ªçc t·∫≠p th√¥ng minh. Tr·∫£ l·ªùi c√¢u h·ªèi m·ªôt c√°ch ch√≠nh x√°c v√† h·ªØu √≠ch. 
        S·ª≠ d·ª•ng HTML formatting cho c√¢u tr·∫£ l·ªùi ƒë·∫πp m·∫Øt."""
        
        ai_response = call_openai_api(question, general_prompt, "H·ªçc t·∫≠p chung")
        
        return {
            "answer": ai_response,
            "suggestions": ["H·ªèi v·ªÅ m√¥n h·ªçc c·ª• th·ªÉ", "Ph∆∞∆°ng ph√°p h·ªçc t·∫≠p", "Qu·∫£n l√Ω th·ªùi gian", "T√¨m t√†i li·ªáu"],
            "ai_mode": "general"
        }
        
    except Exception as e:
        # Fallback message n·∫øu API l·ªói
        return {
            "answer": f"""ü§ñ T√¥i hi·ªÉu b·∫°n ƒëang h·ªèi v·ªÅ: "{question}"
            
            <strong>üí° G·ª£i √Ω:</strong><br>
            ‚Ä¢ H√£y h·ªèi c·ª• th·ªÉ h∆°n v·ªÅ m√¥n h·ªçc b·∫°n quan t√¢m<br>
            ‚Ä¢ T√¥i c√≥ th·ªÉ gi·∫£i th√≠ch c√°c kh√°i ni·ªám v·ªÅ To√°n, V·∫≠t l√Ω, H√≥a h·ªçc, L·∫≠p tr√¨nh...<br>
            ‚Ä¢ Ho·∫∑c h·ªèi v·ªÅ c√°ch qu·∫£n l√Ω th·ªùi gian h·ªçc t·∫≠p hi·ªáu qu·∫£<br><br>
            
            <strong>V√≠ d·ª•:</strong><br>
            ‚Ä¢ "Gi·∫£i th√≠ch ƒë·ªãnh l√Ω Pythagore"<br>
            ‚Ä¢ "C√¥ng th·ª©c t√≠nh v·∫≠n t·ªëc trong v·∫≠t l√Ω"<br>
            ‚Ä¢ "C√°ch h·ªçc Python cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu"<br>
            ‚Ä¢ "L√†m th·∫ø n√†o ƒë·ªÉ √¥n thi hi·ªáu qu·∫£?"<br><br>
            
            <em>L∆∞u √Ω: Hi·ªán ƒëang c√≥ v·∫•n ƒë·ªÅ v·ªõi AI, t√¥i s·∫Ω c·ªë g·∫Øng h·ªó tr·ª£ b·∫°n t·ªët nh·∫•t c√≥ th·ªÉ!</em>
            """,
            "suggestions": ["H·ªèi v·ªÅ To√°n", "H·ªèi v·ªÅ V·∫≠t l√Ω", "H·ªèi v·ªÅ L·∫≠p tr√¨nh", "M·∫πo h·ªçc t·∫≠p"]
        }


def handle_math_questions(question):
    """X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ To√°n h·ªçc b·∫±ng AI th·ª±c s·ª±"""
    print(f"[DEBUG] handle_math_questions called with: {question}")
    
    try:
        ai_response = call_openai_api(question, SYSTEM_PROMPTS['math'], "To√°n h·ªçc")
        print(f"[DEBUG] Math AI response: {ai_response[:100]}...")
        
        return {
            "answer": ai_response,
            "suggestions": ["H·ªèi th√™m v·ªÅ To√°n", "B√†i t·∫≠p th·ª±c h√†nh", "V√≠ d·ª• c·ª• th·ªÉ", "Chuy·ªÉn sang m√¥n kh√°c"],
            "ai_mode": "math"
        }
    except Exception as e:
        print(f"[DEBUG] Math AI error: {e}")
        return {
            "answer": """üßÆ <strong>To√°n h·ªçc</strong><br><br>
            Xin l·ªói, hi·ªán t·∫°i c√≥ l·ªói k·∫øt n·ªëi v·ªõi AI To√°n h·ªçc. Tuy nhi√™n, t√¥i v·∫´n c√≥ th·ªÉ h·ªó tr·ª£ b·∫°n v·ªõi c√°c c√¥ng th·ª©c c∆° b·∫£n:<br><br>
            
            <strong>üìê H√¨nh h·ªçc:</strong><br>
            ‚Ä¢ Di·ªán t√≠ch h√¨nh vu√¥ng: <span class="formula">S = a¬≤</span><br>
            ‚Ä¢ Di·ªán t√≠ch h√¨nh tr√≤n: <span class="formula">S = œÄr¬≤</span><br>
            ‚Ä¢ ƒê·ªãnh l√Ω Pythagore: <span class="formula">a¬≤ + b¬≤ = c¬≤</span><br><br>
            
            <strong>üìä ƒê·∫°i s·ªë:</strong><br>
            ‚Ä¢ C√¥ng th·ª©c nghi·ªám b·∫≠c 2: <span class="formula">x = (-b ¬± ‚àö(b¬≤-4ac))/2a</span><br>
            ‚Ä¢ H·∫±ng ƒë·∫≥ng th·ª©c: <span class="formula">(a+b)¬≤ = a¬≤ + 2ab + b¬≤</span><br><br>
            
            H√£y h·ªèi c√¢u h·ªèi c·ª• th·ªÉ ƒë·ªÉ t√¥i c√≥ th·ªÉ h·ªó tr·ª£ t·ªët h∆°n!""",
            "suggestions": ["C√¥ng th·ª©c h√¨nh h·ªçc", "Gi·∫£i ph∆∞∆°ng tr√¨nh", "B√†i t·∫≠p th·ª±c h√†nh", "Chuy·ªÉn sang m√¥n kh√°c"],
            "ai_mode": "math"
        }


def handle_physics_questions(question):
    """X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ V·∫≠t l√Ω b·∫±ng AI th·ª±c s·ª±"""
    
    try:
        ai_response = call_openai_api(question, SYSTEM_PROMPTS['physics'], "V·∫≠t l√Ω")
        
        return {
            "answer": ai_response,
            "suggestions": ["H·ªèi th√™m v·ªÅ V·∫≠t l√Ω", "Th√≠ nghi·ªám th·ª±c t·∫ø", "V√≠ d·ª• ·ª©ng d·ª•ng", "Chuy·ªÉn sang m√¥n kh√°c"],
            "ai_mode": "physics"
        }
    except Exception as e:
        return {
            "answer": """‚ö° <strong>V·∫≠t l√Ω</strong><br><br>
            Xin l·ªói, hi·ªán t·∫°i c√≥ l·ªói k·∫øt n·ªëi v·ªõi AI V·∫≠t l√Ω. Tuy nhi√™n, ƒë√¢y l√† m·ªôt s·ªë c√¥ng th·ª©c c∆° b·∫£n:<br><br>
            
            <strong>üèÉ C∆° h·ªçc:</strong><br>
            ‚Ä¢ L·ª±c: <span class="formula">F = ma</span><br>
            ‚Ä¢ V·∫≠n t·ªëc: <span class="formula">v = s/t</span><br>
            ‚Ä¢ Gia t·ªëc: <span class="formula">a = Œîv/Œît</span><br><br>
            
            <strong>‚ö° ƒêi·ªán h·ªçc:</strong><br>
            ‚Ä¢ ƒê·ªãnh lu·∫≠t Ohm: <span class="formula">V = IR</span><br>
            ‚Ä¢ C√¥ng su·∫•t: <span class="formula">P = VI</span><br><br>
            
            <strong>üåä S√≥ng:</strong><br>
            ‚Ä¢ V·∫≠n t·ªëc s√≥ng: <span class="formula">v = fŒª</span><br><br>
            
            H√£y h·ªèi v·ªÅ hi·ªán t∆∞·ª£ng v·∫≠t l√Ω c·ª• th·ªÉ!""",
            "suggestions": ["C∆° h·ªçc", "ƒêi·ªán h·ªçc", "Quang h·ªçc", "Th√≠ nghi·ªám"],
            "ai_mode": "physics"
        }


def handle_programming_questions(question):
    """X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ L·∫≠p tr√¨nh b·∫±ng AI th·ª±c s·ª±"""
    
    try:
        ai_response = call_openai_api(question, SYSTEM_PROMPTS['programming'], "L·∫≠p tr√¨nh")
        
        return {
            "answer": ai_response,
            "suggestions": ["Code examples", "Best practices", "Debugging tips", "Chuy·ªÉn sang m√¥n kh√°c"],
            "ai_mode": "programming"
        }
    except Exception as e:
        return {
            "answer": """üíª <strong>L·∫≠p tr√¨nh</strong><br><br>
            Xin l·ªói, hi·ªán t·∫°i c√≥ l·ªói k·∫øt n·ªëi v·ªõi AI l·∫≠p tr√¨nh. Tuy nhi√™n, ƒë√¢y l√† m·ªôt s·ªë v√≠ d·ª• c∆° b·∫£n:<br><br>
            
            <strong>üêç Python c∆° b·∫£n:</strong><br>
            <div class="code-block">
            <div class="code-header">Python</div>
            <div class="code-content">
            # In ra "Hello World"<br>
            print("Hello, World!")<br><br>
            
            # V√≤ng l·∫∑p for<br>
            for i in range(5):<br>
            &nbsp;&nbsp;&nbsp;&nbsp;print(f"S·ªë {i}")
            </div>
            </div><br>
            
            <strong>üìö T√†i nguy√™n h·ªçc t·∫≠p:</strong><br>
            ‚Ä¢ Python.org - T√†i li·ªáu ch√≠nh th·ª©c<br>
            ‚Ä¢ W3Schools - Tutorial t·ª´ c∆° b·∫£n<br>
            ‚Ä¢ GitHub - C√°c d·ª± √°n m·∫´u<br><br>
            
            H√£y h·ªèi v·ªÅ ng√¥n ng·ªØ l·∫≠p tr√¨nh c·ª• th·ªÉ!""",
            "suggestions": ["Python basics", "JavaScript", "Web development", "Algorithms"],
            "ai_mode": "programming"
        }


def handle_chemistry_questions(question):
    """X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ H√≥a h·ªçc b·∫±ng AI th·ª±c s·ª±"""
    try:
        ai_response = call_openai_api(question, SYSTEM_PROMPTS['chemistry'], "H√≥a h·ªçc")
        
        return {
            "answer": ai_response,
            "suggestions": ["Ph·∫£n ·ª©ng h√≥a h·ªçc", "B·∫£ng tu·∫ßn ho√†n", "Th√≠ nghi·ªám", "Chuy·ªÉn sang m√¥n kh√°c"],
            "ai_mode": "chemistry"
        }
    except Exception as e:
        return {
            "answer": """üß™ <strong>H√≥a h·ªçc</strong><br><br>
            Xin l·ªói, hi·ªán t·∫°i c√≥ l·ªói k·∫øt n·ªëi v·ªõi AI H√≥a h·ªçc. Tuy nhi√™n, ƒë√¢y l√† m·ªôt s·ªë ki·∫øn th·ª©c c∆° b·∫£n:<br><br>
            
            <strong>‚öõÔ∏è Nguy√™n t·ª≠:</strong><br>
            ‚Ä¢ Proton (+), Neutron (0), Electron (-)<br>
            ‚Ä¢ S·ªë hi·ªáu nguy√™n t·ª≠ = s·ªë proton<br><br>
            
            <strong>üîÑ Ph·∫£n ·ª©ng c∆° b·∫£n:</strong><br>
            ‚Ä¢ 2H‚ÇÇ + O‚ÇÇ ‚Üí 2H‚ÇÇO<br>
            ‚Ä¢ NaCl ‚Üí Na‚Å∫ + Cl‚Åª<br><br>
            
            <strong>üìä B·∫£ng tu·∫ßn ho√†n:</strong><br>
            ‚Ä¢ 18 nh√≥m, 7 chu k·ª≥<br>
            ‚Ä¢ Kim lo·∫°i - Phi kim - Kh√≠ hi·∫øm""",
            "suggestions": ["Ph·∫£n ·ª©ng h√≥a h·ªçc", "B·∫£ng tu·∫ßn ho√†n", "C√¢n b·∫±ng ph∆∞∆°ng tr√¨nh", "Chuy·ªÉn sang m√¥n kh√°c"],
            "ai_mode": "chemistry"
        }


def handle_history_questions(question):
    """X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ L·ªãch s·ª≠ b·∫±ng AI th·ª±c s·ª±"""
    try:
        ai_response = call_openai_api(question, SYSTEM_PROMPTS['history'], "L·ªãch s·ª≠")
        
        return {
            "answer": ai_response,
            "suggestions": ["L·ªãch s·ª≠ Vi·ªát Nam", "L·ªãch s·ª≠ th·∫ø gi·ªõi", "Nh√¢n v·∫≠t l·ªãch s·ª≠", "Chuy·ªÉn sang m√¥n kh√°c"],
            "ai_mode": "history"
        }
    except Exception as e:
        return {
            "answer": """üìú <strong>L·ªãch s·ª≠</strong><br><br>
            Xin l·ªói, hi·ªán t·∫°i c√≥ l·ªói k·∫øt n·ªëi v·ªõi AI L·ªãch s·ª≠. Tuy nhi√™n, ƒë√¢y l√† m·ªôt s·ªë m·ªëc th·ªùi gian quan tr·ªçng:<br><br>
            
            <strong>üáªüá≥ L·ªãch s·ª≠ Vi·ªát Nam:</strong><br>
            ‚Ä¢ 2879 TCN: Nh√† n∆∞·ªõc VƒÉn Lang<br>
            ‚Ä¢ 1010: ThƒÉng Long th√†nh kinh ƒë√¥<br>
            ‚Ä¢ 1945: Tuy√™n ng√¥n ƒë·ªôc l·∫≠p<br><br>
            
            <strong>üåç L·ªãch s·ª≠ th·∫ø gi·ªõi:</strong><br>
            ‚Ä¢ 1789: C√°ch m·∫°ng Ph√°p<br>
            ‚Ä¢ 1914-1918: Th·∫ø chi·∫øn I<br>
            ‚Ä¢ 1939-1945: Th·∫ø chi·∫øn II""",
            "suggestions": ["L·ªãch s·ª≠ Vi·ªát Nam", "L·ªãch s·ª≠ th·∫ø gi·ªõi", "Nh√¢n v·∫≠t l·ªãch s·ª≠", "Chuy·ªÉn sang m√¥n kh√°c"],
            "ai_mode": "history"
        }


def handle_english_questions(question):
    """X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ Ti·∫øng Anh b·∫±ng AI th·ª±c s·ª±"""
    try:
        ai_response = call_openai_api(question, SYSTEM_PROMPTS['english'], "Ti·∫øng Anh")
        
        return {
            "answer": ai_response,
            "suggestions": ["Grammar", "Vocabulary", "Pronunciation", "Chuy·ªÉn sang m√¥n kh√°c"],
            "ai_mode": "english"
        }
    except Exception as e:
        return {
            "answer": """üá∫üá∏ <strong>Ti·∫øng Anh</strong><br><br>
            Xin l·ªói, hi·ªán t·∫°i c√≥ l·ªói k·∫øt n·ªëi v·ªõi AI Ti·∫øng Anh. Tuy nhi√™n, ƒë√¢y l√† m·ªôt s·ªë tips c∆° b·∫£n:<br><br>
            
            <strong>üìö Grammar c∆° b·∫£n:</strong><br>
            ‚Ä¢ Present: I study English<br>
            ‚Ä¢ Past: I studied English<br>
            ‚Ä¢ Future: I will study English<br><br>
            
            <strong>üí° Tips h·ªçc t·ª´ v·ª±ng:</strong><br>
            ‚Ä¢ H·ªçc 5-10 t·ª´ m·ªõi m·ªói ng√†y<br>
            ‚Ä¢ S·ª≠ d·ª•ng flashcards<br>
            ‚Ä¢ ƒê·ªçc s√°ch, xem phim ti·∫øng Anh<br><br>
            
            <strong>üó£Ô∏è Luy·ªán speaking:</strong><br>
            ‚Ä¢ N√≥i chuy·ªán v·ªõi b·∫£n th√¢n<br>
            ‚Ä¢ Tham gia c√¢u l·∫°c b·ªô ti·∫øng Anh<br>
            ‚Ä¢ S·ª≠ d·ª•ng apps nh∆∞ HelloTalk""",
            "suggestions": ["Grammar", "Vocabulary", "Pronunciation", "Chuy·ªÉn sang m√¥n kh√°c"],
            "ai_mode": "english"
        }


def handle_study_questions(question):
    """X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ ph∆∞∆°ng ph√°p h·ªçc t·∫≠p b·∫±ng AI th·ª±c s·ª±"""
    try:
        ai_response = call_openai_api(question, SYSTEM_PROMPTS['study'], "Ph∆∞∆°ng ph√°p h·ªçc t·∫≠p")
        
        return {
            "answer": ai_response,
            "suggestions": ["K·ªπ thu·∫≠t ghi nh·ªõ", "L·∫≠p k·∫ø ho·∫°ch h·ªçc", "ƒê·ªông l·ª±c h·ªçc t·∫≠p", "Chuy·ªÉn sang m√¥n kh√°c"],
            "ai_mode": "study"
        }
    except Exception as e:
        return {
            "answer": """üìö <strong>Ph∆∞∆°ng ph√°p h·ªçc t·∫≠p hi·ªáu qu·∫£</strong><br><br>
            
            <strong>üéØ K·ªπ thu·∫≠t Pomodoro:</strong><br>
            ‚Ä¢ H·ªçc 25 ph√∫t, ngh·ªâ 5 ph√∫t<br>
            ‚Ä¢ Sau 4 l·∫ßn, ngh·ªâ 15-30 ph√∫t<br><br>
            
            <strong>üìù Ghi ch√∫ hi·ªáu qu·∫£:</strong><br>
            ‚Ä¢ S·ª≠ d·ª•ng s∆° ƒë·ªì t∆∞ duy (Mind Map)<br>
            ‚Ä¢ Ghi ch√∫ Cornell Method<br>
            ‚Ä¢ Highlight c√°c √Ω ch√≠nh<br><br>
            
            <strong>üß† K·ªπ thu·∫≠t ghi nh·ªõ:</strong><br>
            ‚Ä¢ L·∫∑p l·∫°i c√°ch qu√£ng (Spaced Repetition)<br>
            ‚Ä¢ Li√™n k·∫øt th√¥ng tin m·ªõi v·ªõi ki·∫øn th·ª©c c≈©<br>
            ‚Ä¢ Th·ª±c h√†nh active recall<br><br>
            
            <strong>‚è∞ Qu·∫£n l√Ω th·ªùi gian:</strong><br>
            ‚Ä¢ L·∫≠p danh s√°ch vi·ªác c·∫ßn l√†m<br>
            ‚Ä¢ ∆Øu ti√™n c√¥ng vi·ªác quan tr·ªçng<br>
            ‚Ä¢ T·∫°o th√≥i quen h·ªçc t·∫≠p ƒë·ªÅu ƒë·∫∑n""",
            "suggestions": ["K·ªπ thu·∫≠t ghi nh·ªõ", "Qu·∫£n l√Ω th·ªùi gian", "Gi·∫£m stress", "L·∫≠p k·∫ø ho·∫°ch"],
            "ai_mode": "study"
        }


def handle_time_management_questions(question):
    """X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ qu·∫£n l√Ω th·ªùi gian"""
    
    return {
        "answer": """‚è∞ <strong>Qu·∫£n l√Ω th·ªùi gian hi·ªáu qu·∫£</strong><br><br>
        
        <strong>üìÖ L·∫≠p k·∫ø ho·∫°ch h√†ng ng√†y:</strong><br>
        ‚Ä¢ Vi·∫øt ra 3 vi·ªác quan tr·ªçng nh·∫•t<br>
        ‚Ä¢ ∆Ø·ªõc t√≠nh th·ªùi gian cho m·ªói vi·ªác<br>
        ‚Ä¢ B·∫Øt ƒë·∫ßu v·ªõi vi·ªác kh√≥ nh·∫•t<br><br>
        
        <strong>üéØ Ma tr·∫≠n Eisenhower:</strong><br>
        ‚Ä¢ Quan tr·ªçng + G·∫•p = L√†m ngay<br>
        ‚Ä¢ Quan tr·ªçng + Kh√¥ng g·∫•p = L√™n k·∫ø ho·∫°ch<br>
        ‚Ä¢ Kh√¥ng quan tr·ªçng + G·∫•p = ·ª¶y th√°c<br>
        ‚Ä¢ Kh√¥ng quan tr·ªçng + Kh√¥ng g·∫•p = Lo·∫°i b·ªè<br><br>
        
        <strong>‚ö° Tips nhanh:</strong><br>
        ‚Ä¢ T·∫Øt th√¥ng b√°o khi h·ªçc<br>
        ‚Ä¢ Chu·∫©n b·ªã m·ªçi th·ª© t·ª´ t·ªëi h√¥m tr∆∞·ªõc<br>
        ‚Ä¢ Ngh·ªâ ng∆°i ƒë√∫ng c√°ch<br>
        ‚Ä¢ Th∆∞·ªüng cho b·∫£n th√¢n khi ho√†n th√†nh m·ª•c ti√™u""",
        "suggestions": ["L·∫≠p k·∫ø ho·∫°ch h·ªçc t·∫≠p", "∆Øu ti√™n c√¥ng vi·ªác", "Lo·∫°i b·ªè ph√¢n t√¢m", "T·∫°o th√≥i quen"],
        "ai_mode": "time_management"
    }


def handle_ai_question_with_context(question, context_messages=None):
    """X·ª≠ l√Ω c√¢u h·ªèi AI v·ªõi context t·ª´ l·ªãch s·ª≠ cu·ªôc tr√≤ chuy·ªán"""
    q = question.lower()
    print(f"[DEBUG] handle_ai_question_with_context called with: {question}")
    print(f"[DEBUG] Context messages: {len(context_messages) if context_messages else 0}")
    
    # Detect subject nh∆∞ tr∆∞·ªõc
    if any(keyword in q for keyword in ['l·∫≠p tr√¨nh', 'programming', 'code', 'python', 'javascript', 'thu·∫≠t to√°n', 'algorithm', 'decision tree', 'machine learning', 'ai']):
        return handle_programming_questions_with_context(question, context_messages)
    
    if any(keyword in q for keyword in ['to√°n', 'math', 'c√¥ng th·ª©c', 't√≠nh', 'ph∆∞∆°ng tr√¨nh']) and 'thu·∫≠t to√°n' not in q and 'algorithm' not in q:
        return handle_math_questions_with_context(question, context_messages)
    
    if any(keyword in q for keyword in ['v·∫≠t l√Ω', 'physics', 'l·ª±c', 'nƒÉng l∆∞·ª£ng', 't·ªëc ƒë·ªô']):
        return handle_physics_questions_with_context(question, context_messages)
    
    if any(keyword in q for keyword in ['h√≥a h·ªçc', 'chemistry', 'ph·∫£n ·ª©ng', 'nguy√™n t·ªë']):
        return handle_chemistry_questions_with_context(question, context_messages)
    
    if any(keyword in q for keyword in ['l·ªãch s·ª≠', 'history', 'vi·ªát nam', 'th·∫ø gi·ªõi']):
        return handle_history_questions_with_context(question, context_messages)
    
    if any(keyword in q for keyword in ['ti·∫øng anh', 'english', 'grammar', 'vocabulary']):
        return handle_english_questions_with_context(question, context_messages)
    
    if any(keyword in q for keyword in ['h·ªçc', '√¥n thi', 'thi c·ª≠', 'ki·ªÉm tra', 'm·∫πo', 'ph∆∞∆°ng ph√°p']):
        return handle_study_questions_with_context(question, context_messages)
    
    if any(keyword in q for keyword in ['th·ªùi gian', 'k·∫ø ho·∫°ch', 'l·ªãch tr√¨nh', 'qu·∫£n l√Ω']):
        return handle_time_management_questions_with_context(question, context_messages)
    
    # General fallback v·ªõi context
    return handle_general_questions_with_context(question, context_messages)


def call_openai_api_with_context(question, system_prompt, subject, context_messages=None):
    """G·ªçi OpenAI API v·ªõi context t·ª´ l·ªãch s·ª≠ cu·ªôc tr√≤ chuy·ªán"""
    try:
        print(f"[DEBUG] call_openai_api_with_context called for subject: {subject}")
        print(f"[DEBUG] Question: {question}")
        print(f"[DEBUG] Context messages: {len(context_messages) if context_messages else 0}")
        
        # X√¢y d·ª±ng messages v·ªõi context
        messages = [{"role": "system", "content": system_prompt}]
        
        # Th√™m context messages n·∫øu c√≥
        if context_messages:
            messages.extend(context_messages)
        
        # Th√™m c√¢u h·ªèi hi·ªán t·∫°i
        messages.append({"role": "user", "content": question})
        
        print(f"[DEBUG] Sending request to OpenAI with {len(messages)} messages")
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=messages,
            max_tokens=1200,  # TƒÉng max_tokens ƒë·ªÉ x·ª≠ l√Ω context
            temperature=0.3,
        )
        
        answer = response.choices[0].message.content.strip()
        print(f"[DEBUG] OpenAI response received: {answer[:100]}...")
        
        return answer
    except Exception as e:
        print(f"[ERROR] OpenAI API Error: {e}")
        return f"Hi·ªán t·∫°i c√≥ l·ªói k·∫øt n·ªëi v·ªõi AI. Vui l√≤ng th·ª≠ l·∫°i sau. Chi ti·∫øt l·ªói: {str(e)}"


def handle_math_questions_with_context(question, context_messages=None):
    """X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ To√°n h·ªçc v·ªõi context"""
    try:
        ai_response = call_openai_api_with_context(question, SYSTEM_PROMPTS['math'], "To√°n h·ªçc", context_messages)
        return {
            "answer": ai_response,
            "suggestions": ["H·ªèi th√™m v·ªÅ To√°n", "B√†i t·∫≠p th·ª±c h√†nh", "V√≠ d·ª• c·ª• th·ªÉ", "Chuy·ªÉn sang m√¥n kh√°c"],
            "ai_mode": "math"
        }
    except Exception as e:
        return handle_math_questions(question)  # Fallback to non-context version


def handle_programming_questions_with_context(question, context_messages=None):
    """X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ L·∫≠p tr√¨nh v·ªõi context"""
    try:
        ai_response = call_openai_api_with_context(question, SYSTEM_PROMPTS['programming'], "L·∫≠p tr√¨nh", context_messages)
        return {
            "answer": ai_response,
            "suggestions": ["Code examples", "Best practices", "Debugging tips", "Chuy·ªÉn sang m√¥n kh√°c"],
            "ai_mode": "programming"
        }
    except Exception as e:
        return handle_programming_questions(question)  # Fallback


def handle_physics_questions_with_context(question, context_messages=None):
    """X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ V·∫≠t l√Ω v·ªõi context"""
    try:
        ai_response = call_openai_api_with_context(question, SYSTEM_PROMPTS['physics'], "V·∫≠t l√Ω", context_messages)
        return {
            "answer": ai_response,
            "suggestions": ["H·ªèi th√™m v·ªÅ V·∫≠t l√Ω", "Th√≠ nghi·ªám th·ª±c t·∫ø", "V√≠ d·ª• ·ª©ng d·ª•ng", "Chuy·ªÉn sang m√¥n kh√°c"],
            "ai_mode": "physics"
        }
    except Exception as e:
        return handle_physics_questions(question)  # Fallback


def handle_chemistry_questions_with_context(question, context_messages=None):
    """X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ H√≥a h·ªçc v·ªõi context"""
    try:
        ai_response = call_openai_api_with_context(question, SYSTEM_PROMPTS['chemistry'], "H√≥a h·ªçc", context_messages)
        return {
            "answer": ai_response,
            "suggestions": ["Ph·∫£n ·ª©ng h√≥a h·ªçc", "B·∫£ng tu·∫ßn ho√†n", "Th√≠ nghi·ªám", "Chuy·ªÉn sang m√¥n kh√°c"],
            "ai_mode": "chemistry"
        }
    except Exception as e:
        return handle_chemistry_questions(question)  # Fallback


def handle_history_questions_with_context(question, context_messages=None):
    """X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ L·ªãch s·ª≠ v·ªõi context"""
    try:
        ai_response = call_openai_api_with_context(question, SYSTEM_PROMPTS['history'], "L·ªãch s·ª≠", context_messages)
        return {
            "answer": ai_response,
            "suggestions": ["L·ªãch s·ª≠ Vi·ªát Nam", "L·ªãch s·ª≠ th·∫ø gi·ªõi", "C√°c s·ª± ki·ªán quan tr·ªçng", "Chuy·ªÉn sang m√¥n kh√°c"],
            "ai_mode": "history"
        }
    except Exception as e:
        return handle_history_questions(question)  # Fallback


def handle_english_questions_with_context(question, context_messages=None):
    """X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ Ti·∫øng Anh v·ªõi context"""
    try:
        ai_response = call_openai_api_with_context(question, SYSTEM_PROMPTS['english'], "Ti·∫øng Anh", context_messages)
        return {
            "answer": ai_response,
            "suggestions": ["Grammar tips", "Vocabulary", "Speaking practice", "Chuy·ªÉn sang m√¥n kh√°c"],
            "ai_mode": "english"
        }
    except Exception as e:
        return handle_english_questions(question)  # Fallback


def handle_study_questions_with_context(question, context_messages=None):
    """X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ ph∆∞∆°ng ph√°p h·ªçc t·∫≠p v·ªõi context"""
    try:
        ai_response = call_openai_api_with_context(question, SYSTEM_PROMPTS['study'], "Ph∆∞∆°ng ph√°p h·ªçc t·∫≠p", context_messages)
        return {
            "answer": ai_response,
            "suggestions": ["K·ªπ thu·∫≠t ghi nh·ªõ", "L·∫≠p k·∫ø ho·∫°ch h·ªçc", "ƒê·ªông l·ª±c h·ªçc t·∫≠p", "Chuy·ªÉn sang m√¥n kh√°c"],
            "ai_mode": "study"
        }
    except Exception as e:
        return handle_study_questions(question)  # Fallback


def handle_time_management_questions_with_context(question, context_messages=None):
    """X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ qu·∫£n l√Ω th·ªùi gian v·ªõi context"""
    try:
        ai_response = call_openai_api_with_context(question, SYSTEM_PROMPTS['study'], "Qu·∫£n l√Ω th·ªùi gian", context_messages)
        return {
            "answer": ai_response,
            "suggestions": ["L·∫≠p k·∫ø ho·∫°ch", "∆Øu ti√™n c√¥ng vi·ªác", "C√¥ng c·ª• qu·∫£n l√Ω", "Chuy·ªÉn sang m√¥n kh√°c"],
            "ai_mode": "study"
        }
    except Exception as e:
        return handle_time_management_questions(question)  # Fallback


def handle_general_questions_with_context(question, context_messages=None):
    """X·ª≠ l√Ω c√¢u h·ªèi chung v·ªõi context"""
    try:
        general_prompt = """B·∫°n l√† tr·ª£ l√Ω h·ªçc t·∫≠p th√¥ng minh. Tr·∫£ l·ªùi c√¢u h·ªèi m·ªôt c√°ch ch√≠nh x√°c v√† h·ªØu √≠ch. 
        S·ª≠ d·ª•ng HTML formatting cho c√¢u tr·∫£ l·ªùi ƒë·∫πp m·∫Øt. D·ª±a v√†o ng·ªØ c·∫£nh cu·ªôc tr√≤ chuy·ªán tr∆∞·ªõc ƒë√≥ ƒë·ªÉ ƒë∆∞a ra c√¢u tr·∫£ l·ªùi ph√π h·ª£p."""
        
        ai_response = call_openai_api_with_context(question, general_prompt, "H·ªçc t·∫≠p chung", context_messages)
        
        return {
            "answer": ai_response,
            "suggestions": ["H·ªèi v·ªÅ m√¥n h·ªçc c·ª• th·ªÉ", "Ph∆∞∆°ng ph√°p h·ªçc t·∫≠p", "Qu·∫£n l√Ω th·ªùi gian", "T√¨m t√†i li·ªáu"],
            "ai_mode": "general"
        }
    except Exception as e:
        return handle_ai_question(question)  # Fallback to original function
