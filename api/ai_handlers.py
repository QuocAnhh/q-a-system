from datetime import datetime
from config import SYSTEM_PROMPTS
from openai_manager import get_smart_response, openai_manager


def _get_task_type_from_subject(subject):
    """X√°c ƒë·ªãnh task type t·ª´ subject ƒë·ªÉ ch·ªçn model ph√π h·ª£p"""
    subject_lower = subject.lower()
    
    if any(keyword in subject_lower for keyword in ['programming', 'l·∫≠p tr√¨nh', 'code', 'thu·∫≠t to√°n', 'algorithm']):
        return "programming"
    elif any(keyword in subject_lower for keyword in ['math', 'to√°n', 'calculus', 'algebra', 'geometry']):
        return "math"
    elif any(keyword in subject_lower for keyword in ['document', 't√†i li·ªáu', 'analysis', 'ph√¢n t√≠ch']):
        return "document_analysis"
    else:
        return "general"





def handle_ai_question(question):
    """X·ª≠ l√Ω c√¢u h·ªèi AI th√¥ng minh v·ªõi logic detect ƒë∆∞·ª£c c·∫£i thi·ªán"""
    q = question.lower()
    print(f"[DEBUG] handle_ai_question called with: {question}")
    
    # QUAN TR·ªåNG: Ki·ªÉm tra programming tr∆∞·ªõc v√¨ "thu·∫≠t to√°n" ch·ª©a "to√°n"
    if any(keyword in q for keyword in ['l·∫≠p tr√¨nh', 'programming', 'code', 'python', 'javascript', 'thu·∫≠t to√°n', 'algorithm', 'decision tree', 'machine learning', 'ai']):
        print(f"[DEBUG] Detected programming keywords, routing to handle_programming_questions")
        return handle_programming_questions(question)
    
    # Ki·ªÉm tra math sau, nh∆∞ng lo·∫°i tr·ª´ tr∆∞·ªùng h·ª£p l√† thu·∫≠t to√°n
    if any(keyword in q for keyword in ['to√°n', 'math', 'c√¥ng th·ª©c', 't√≠nh', 'ph∆∞∆°ng tr√¨nh']) and 'thu·∫≠t to√°n' not in q and 'algorithm' not in q:
        print(f"[DEBUG] Detected math keywords, routing to handle_math_questions")
        return handle_math_questions(question)
    
    if any(keyword in q for keyword in ['v·∫≠t l√Ω', 'physics', 'l·ª±c', 'nƒÉng l∆∞·ª£ng', 't·ªëc ƒë·ªô']):
        return handle_physics_questions(question)
    
    if any(keyword in q for keyword in ['h√≥a h·ªçc', 'chemistry', 'ph·∫£n ·ª©ng', 'nguy√™n t·ªë']):
        return handle_chemistry_questions(question)
    
    if any(keyword in q for keyword in ['l·ªãch s·ª≠', 'history', 'vi·ªát nam', 'th·∫ø gi·ªõi']):
        return handle_history_questions(question)
    
    if any(keyword in q for keyword in ['ti·∫øng anh', 'english', 'grammar', 'vocabulary']):
        return handle_english_questions(question)
    
    if any(keyword in q for keyword in ['h·ªçc', '√¥n thi', 'thi c·ª≠', 'ki·ªÉm tra', 'm·∫πo', 'ph∆∞∆°ng ph√°p']):
        return handle_study_questions(question)
    
    if any(keyword in q for keyword in ['th·ªùi gian', 'k·∫ø ho·∫°ch', 'l·ªãch tr√¨nh', 'qu·∫£n l√Ω']):
        return handle_time_management_questions(question)

    if any(keyword in q for keyword in ['ƒë·∫°i s·ªë tuy·∫øn t√≠nh', 'linear algebra', 'ma tr·∫≠n', 'matrix', 'vector', 'kh√¥ng gian vector', 'h·ªá ph∆∞∆°ng tr√¨nh tuy·∫øn t√≠nh']):
        print(f"[DEBUG] Detected linear algebra keywords, routing to handle_linear_algebra_questions")
        return handle_linear_algebra_questions(question)

    if any(keyword in q for keyword in ['x√°c su·∫•t th·ªëng k√™', 'probability', 'statistics', 'ph√¢n ph·ªëi', 'distribution', 'ki·ªÉm ƒë·ªãnh gi·∫£ thuy·∫øt', 'hypothesis testing', 'h·ªìi quy']):
        print(f"[DEBUG] Detected probability statistics keywords, routing to handle_probability_statistics_questions")
        return handle_probability_statistics_questions(question)

    if any(keyword in q for keyword in ['gi·∫£i t√≠ch', 'calculus', 'vi ph√¢n', 'differential', 't√≠ch ph√¢n', 'integral', 'ƒë·∫°o h√†m', 'derivative', 'gi·ªõi h·∫°n', 'limit']):
        print(f"[DEBUG] Detected calculus keywords, routing to handle_calculus_questions")
        return handle_calculus_questions(question)
    
    # General fallback v·ªõi prompt ƒë∆°n gi·∫£n
    try:        
        general_prompt = """B·∫°n l√† tr·ª£ l√Ω h·ªçc t·∫≠p th√¥ng minh. Tr·∫£ l·ªùi c√¢u h·ªèi m·ªôt c√°ch ch√≠nh x√°c v√† h·ªØu √≠ch. 
        S·ª≠ d·ª•ng HTML formatting cho c√¢u tr·∫£ l·ªùi ƒë·∫πp m·∫Øt."""
        
        ai_response = get_smart_response(
            prompt=question,
            system_prompt=general_prompt,
            task_type="general",
            temperature=0.3
        )
        
        return {
            "answer": ai_response,
            "suggestions": ["H·ªèi v·ªÅ m√¥n h·ªçc c·ª• th·ªÉ", "Ph∆∞∆°ng ph√°p h·ªçc t·∫≠p", "Qu·∫£n l√Ω th·ªùi gian", "T√¨m t√†i li·ªáu"],
            "ai_mode": "general"
        }
        
    except Exception as e:
        # Fallback message n·∫øu API l·ªói
        return {
            "answer": f"""ü§ñ T√¥i hi·ªÉu b·∫°n ƒëang h·ªèi v·ªÅ: "{question}"
            
            <strong>üí° G·ª£i √Ω:</strong><br>
            ‚Ä¢ H√£y h·ªèi c·ª• th·ªÉ h∆°n v·ªÅ m√¥n h·ªçc b·∫°n quan t√¢m<br>
            ‚Ä¢ T√¥i c√≥ th·ªÉ gi·∫£i th√≠ch c√°c kh√°i ni·ªám v·ªÅ To√°n, V·∫≠t l√Ω, H√≥a h·ªçc, L·∫≠p tr√¨nh...<br>
            ‚Ä¢ Ho·∫∑c h·ªèi v·ªÅ c√°ch qu·∫£n l√Ω th·ªùi gian h·ªçc t·∫≠p hi·ªáu qu·∫£<br><br>
            
            <strong>V√≠ d·ª•:</strong><br>
            ‚Ä¢ "Gi·∫£i th√≠ch ƒë·ªãnh l√Ω Pythagore"<br>
            ‚Ä¢ "C√¥ng th·ª©c t√≠nh v·∫≠n t·ªëc trong v·∫≠t l√Ω"<br>
            ‚Ä¢ "C√°ch h·ªçc Python cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu"<br>
            ‚Ä¢ "L√†m th·∫ø n√†o ƒë·ªÉ √¥n thi hi·ªáu qu·∫£?"<br><br>
            
            <em>L∆∞u √Ω: Hi·ªán ƒëang c√≥ v·∫•n ƒë·ªÅ v·ªõi AI, t√¥i s·∫Ω c·ªë g·∫Øng h·ªó tr·ª£ b·∫°n t·ªët nh·∫•t c√≥ th·ªÉ!</em>
            """,
            "suggestions": ["H·ªèi v·ªÅ To√°n", "H·ªèi v·ªÅ V·∫≠t l√Ω", "H·ªèi v·ªÅ L·∫≠p tr√¨nh", "M·∫πo h·ªçc t·∫≠p"]
        }


def handle_math_questions(question):
    """X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ To√°n h·ªçc b·∫±ng AI th·ª±c s·ª±"""
    print(f"[DEBUG] handle_math_questions called with: {question}")
    
    try:
        ai_response = get_smart_response(
            prompt=question,
            system_prompt=SYSTEM_PROMPTS['math'],
            task_type="math",
            temperature=0.3
        )
        print(f"[DEBUG] Math AI response: {ai_response[:100]}...")
        
        return {
            "answer": ai_response,
            "suggestions": ["H·ªèi th√™m v·ªÅ To√°n", "B√†i t·∫≠p th·ª±c h√†nh", "V√≠ d·ª• c·ª• th·ªÉ", "Chuy·ªÉn sang m√¥n kh√°c"],
            "ai_mode": "math"
        }
    except Exception as e:
        print(f"[DEBUG] Math AI error: {e}")
        return {
            "answer": """üìê <strong>To√°n h·ªçc</strong><br><br>
            Xin l·ªói, hi·ªán t·∫°i c√≥ l·ªói k·∫øt n·ªëi v·ªõi AI To√°n h·ªçc. Tuy nhi√™n, ƒë√¢y l√† m·ªôt s·ªë c√¥ng th·ª©c c∆° b·∫£n:<br><br>
            
            <strong>üìä H√¨nh h·ªçc:</strong><br>
            ‚Ä¢ Chu vi h√¨nh tr√≤n: <span class="formula">C = 2œÄr</span><br>
            ‚Ä¢ Di·ªán t√≠ch h√¨nh tr√≤n: <span class="formula">S = œÄr¬≤</span><br>
            ‚Ä¢ ƒê·ªãnh l√Ω Pythagore: <span class="formula">a¬≤ + b¬≤ = c¬≤</span><br><br>
            
            <strong>üìà ƒê·∫°i s·ªë:</strong><br>
            ‚Ä¢ C√¥ng th·ª©c nghi·ªám ph∆∞∆°ng tr√¨nh b·∫≠c 2: <span class="formula">x = (-b ¬± ‚àö(b¬≤-4ac))/2a</span><br>
            ‚Ä¢ H·∫±ng ƒë·∫≥ng th·ª©c: <span class="formula">(a+b)¬≤ = a¬≤ + 2ab + b¬≤</span><br><br>
            
            H√£y h·ªèi c√¢u h·ªèi c·ª• th·ªÉ ƒë·ªÉ t√¥i c√≥ th·ªÉ h·ªó tr·ª£ t·ªët h∆°n!""",
            "suggestions": ["C√¥ng th·ª©c h√¨nh h·ªçc", "Gi·∫£i ph∆∞∆°ng tr√¨nh", "B√†i t·∫≠p th·ª±c h√†nh", "Chuy·ªÉn sang m√¥n kh√°c"],
            "ai_mode": "math"
        }


def handle_physics_questions(question):
    """X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ V·∫≠t l√Ω b·∫±ng AI th·ª±c s·ª±"""
    
    try:
        ai_response = get_smart_response(
            prompt=question,
            system_prompt=SYSTEM_PROMPTS['physics'],
            task_type="general",
            temperature=0.3
        )
        
        return {
            "answer": ai_response,
            "suggestions": ["H·ªèi th√™m v·ªÅ V·∫≠t l√Ω", "Th√≠ nghi·ªám th·ª±c t·∫ø", "V√≠ d·ª• ·ª©ng d·ª•ng", "Chuy·ªÉn sang m√¥n kh√°c"],
            "ai_mode": "physics"
        }
    except Exception as e:
        return {
            "answer": """‚ö° <strong>V·∫≠t l√Ω</strong><br><br>
            Xin l·ªói, hi·ªán t·∫°i c√≥ l·ªói k·∫øt n·ªëi v·ªõi AI V·∫≠t l√Ω. Tuy nhi√™n, ƒë√¢y l√† m·ªôt s·ªë c√¥ng th·ª©c c∆° b·∫£n:<br><br>
            
            <strong>üèÉ C∆° h·ªçc:</strong><br>
            ‚Ä¢ L·ª±c: <span class="formula">F = ma</span><br>
            ‚Ä¢ V·∫≠n t·ªëc: <span class="formula">v = s/t</span><br>
            ‚Ä¢ Gia t·ªëc: <span class="formula">a = Œîv/Œît</span><br><br>
            
            <strong>‚ö° ƒêi·ªán h·ªçc:</strong><br>
            ‚Ä¢ ƒê·ªãnh lu·∫≠t Ohm: <span class="formula">V = IR</span><br>
            ‚Ä¢ C√¥ng su·∫•t: <span class="formula">P = UI</span><br><br>
            
            H√£y h·ªèi c√¢u h·ªèi c·ª• th·ªÉ ƒë·ªÉ t√¥i c√≥ th·ªÉ h·ªó tr·ª£ t·ªët h∆°n!""",
            "suggestions": ["C∆° h·ªçc", "ƒêi·ªán h·ªçc", "Quang h·ªçc", "Chuy·ªÉn sang m√¥n kh√°c"],
            "ai_mode": "physics"
        }


def handle_programming_questions(question):
    """X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ L·∫≠p tr√¨nh b·∫±ng AI th·ª±c s·ª±"""
    print(f"[DEBUG] handle_programming_questions called with: {question}")
    
    try:
        ai_response = get_smart_response(
            prompt=question,
            system_prompt=SYSTEM_PROMPTS['programming'],
            task_type="programming",
            temperature=0.2  # Lower temperature for more precise code
        )
        print(f"[DEBUG] Programming AI response: {ai_response[:100]}...")
        
        return {
            "answer": ai_response,
            "suggestions": ["Code example", "Best practices", "Debug help", "Chuy·ªÉn sang m√¥n kh√°c"],
            "ai_mode": "programming"
        }
    except Exception as e:
        print(f"[DEBUG] Programming AI error: {e}")
        return {
            "answer": """üíª <strong>L·∫≠p tr√¨nh</strong><br><br>
            Xin l·ªói, hi·ªán t·∫°i c√≥ l·ªói k·∫øt n·ªëi v·ªõi AI L·∫≠p tr√¨nh. Tuy nhi√™n, ƒë√¢y l√† m·ªôt s·ªë kh√°i ni·ªám c∆° b·∫£n:<br><br>
            
            <strong>üêç Python c∆° b·∫£n:</strong><br>
            ‚Ä¢ In ra m√†n h√¨nh: <code>print("Hello World")</code><br>
            ‚Ä¢ Khai b√°o bi·∫øn: <code>x = 10</code><br>
            ‚Ä¢ V√≤ng l·∫∑p: <code>for i in range(5):</code><br><br>
            
            <strong>üåê JavaScript c∆° b·∫£n:</strong><br>
            ‚Ä¢ In ra console: <code>console.log("Hello World")</code><br>
            ‚Ä¢ Khai b√°o bi·∫øn: <code>let x = 10;</code><br>
            ‚Ä¢ H√†m: <code>function myFunction() {}</code><br><br>
            
            H√£y h·ªèi c√¢u h·ªèi c·ª• th·ªÉ ƒë·ªÉ t√¥i c√≥ th·ªÉ h·ªó tr·ª£ t·ªët h∆°n!""",
            "suggestions": ["Python basics", "JavaScript", "Algorithms", "Chuy·ªÉn sang m√¥n kh√°c"],
            "ai_mode": "programming"
        }


def handle_chemistry_questions(question):
    """X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ H√≥a h·ªçc"""
    try:
        ai_response = get_smart_response(
            prompt=question,
            system_prompt=SYSTEM_PROMPTS['chemistry'],
            task_type="general",
            temperature=0.3
        )
        
        return {
            "answer": ai_response,
            "suggestions": ["Ph·∫£n ·ª©ng h√≥a h·ªçc", "B·∫£ng tu·∫ßn ho√†n", "Th√≠ nghi·ªám", "Chuy·ªÉn sang m√¥n kh√°c"],
            "ai_mode": "chemistry"
        }
    except Exception as e:
        return {
            "answer": """üß™ <strong>H√≥a h·ªçc</strong><br><br>
            Xin l·ªói, hi·ªán t·∫°i c√≥ l·ªói k·∫øt n·ªëi v·ªõi AI H√≥a h·ªçc. Tuy nhi√™n, ƒë√¢y l√† m·ªôt s·ªë ki·∫øn th·ª©c c∆° b·∫£n:<br><br>
            
            <strong>‚öõÔ∏è Nguy√™n t·ªë:</strong><br>
            ‚Ä¢ Hydro (H): Nguy√™n t·ª≠ s·ªë 1<br>
            ‚Ä¢ Carbon (C): Nguy√™n t·ª≠ s·ªë 6<br>
            ‚Ä¢ Oxygen (O): Nguy√™n t·ª≠ s·ªë 8<br><br>
            
            <strong>üî¨ Ph·∫£n ·ª©ng c∆° b·∫£n:</strong><br>
            ‚Ä¢ Ch√°y: <span class="formula">C + O‚ÇÇ ‚Üí CO‚ÇÇ</span><br>
            ‚Ä¢ T·ªïng h·ª£p n∆∞·ªõc: <span class="formula">2H‚ÇÇ + O‚ÇÇ ‚Üí 2H‚ÇÇO</span><br><br>
            
            H√£y h·ªèi c√¢u h·ªèi c·ª• th·ªÉ ƒë·ªÉ t√¥i c√≥ th·ªÉ h·ªó tr·ª£ t·ªët h∆°n!""",
            "suggestions": ["B·∫£ng tu·∫ßn ho√†n", "Ph·∫£n ·ª©ng h√≥a h·ªçc", "C√¥ng th·ª©c h√≥a h·ªçc", "Chuy·ªÉn sang m√¥n kh√°c"],
            "ai_mode": "chemistry"
        }


def handle_history_questions(question):
    """X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ L·ªãch s·ª≠"""
    try:
        ai_response = get_smart_response(
            prompt=question,
            system_prompt=SYSTEM_PROMPTS['history'],
            task_type="general",
            temperature=0.3
        )
        
        return {
            "answer": ai_response,
            "suggestions": ["L·ªãch s·ª≠ Vi·ªát Nam", "L·ªãch s·ª≠ th·∫ø gi·ªõi", "Nh√¢n v·∫≠t l·ªãch s·ª≠", "Chuy·ªÉn sang m√¥n kh√°c"],
            "ai_mode": "history"
        }
    except Exception as e:
        return {
            "answer": """üìö <strong>L·ªãch s·ª≠</strong><br><br>
            Xin l·ªói, hi·ªán t·∫°i c√≥ l·ªói k·∫øt n·ªëi v·ªõi AI L·ªãch s·ª≠. Tuy nhi√™n, ƒë√¢y l√† m·ªôt s·ªë s·ª± ki·ªán quan tr·ªçng:<br><br>
            
            <strong>üáªüá≥ L·ªãch s·ª≠ Vi·ªát Nam:</strong><br>
            ‚Ä¢ 2879 TCN: Vua H√πng d·ª±ng n∆∞·ªõc<br>
            ‚Ä¢ 1945: C√°ch m·∫°ng th√°ng 8<br>
            ‚Ä¢ 1975: Th·ªëng nh·∫•t ƒë·∫•t n∆∞·ªõc<br><br>
            
            <strong>üåç L·ªãch s·ª≠ th·∫ø gi·ªõi:</strong><br>
            ‚Ä¢ 1789: C√°ch m·∫°ng Ph√°p<br>
            ‚Ä¢ 1945: K·∫øt th√∫c Th·∫ø chi·∫øn II<br><br>
            
            H√£y h·ªèi c√¢u h·ªèi c·ª• th·ªÉ ƒë·ªÉ t√¥i c√≥ th·ªÉ h·ªó tr·ª£ t·ªët h∆°n!""",
            "suggestions": ["Vi·ªát Nam", "Th·∫ø gi·ªõi", "Nh√¢n v·∫≠t", "Chuy·ªÉn sang m√¥n kh√°c"],
            "ai_mode": "history"
        }


def handle_english_questions(question):
    """X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ Ti·∫øng Anh"""
    try:
        ai_response = get_smart_response(
            prompt=question,
            system_prompt=SYSTEM_PROMPTS['english'],
            task_type="general",
            temperature=0.3
        )
        
        return {
            "answer": ai_response,
            "suggestions": ["Grammar", "Vocabulary", "Speaking practice", "Chuy·ªÉn sang m√¥n kh√°c"],
            "ai_mode": "english"
        }
    except Exception as e:
        return {
            "answer": """üá¨üáß <strong>English</strong><br><br>
            Sorry, there's currently an issue with the English AI. However, here are some basic grammar rules:<br><br>
            
            <strong>üìù Grammar basics:</strong><br>
            ‚Ä¢ Present Simple: I/You/We/They + verb<br>
            ‚Ä¢ Present Simple: He/She/It + verb + s<br>
            ‚Ä¢ Past Simple: verb + ed (regular verbs)<br><br>
            
            <strong>üìö Common phrases:</strong><br>
            ‚Ä¢ How are you? - B·∫°n c√≥ kh·ªèe kh√¥ng?<br>
            ‚Ä¢ What's your name? - T√™n b·∫°n l√† g√¨?<br>
            ‚Ä¢ Nice to meet you! - R·∫•t vui ƒë∆∞·ª£c g·∫∑p b·∫°n!<br><br>
            
            Please ask a specific question so I can help you better!""",
            "suggestions": ["Grammar rules", "Vocabulary", "Common phrases", "Chuy·ªÉn sang m√¥n kh√°c"],
            "ai_mode": "english"
        }


def handle_study_questions(question):
    """X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ ph∆∞∆°ng ph√°p h·ªçc t·∫≠p"""
    try:
        ai_response = get_smart_response(
            prompt=question,
            system_prompt=SYSTEM_PROMPTS['study'],
            task_type="general",
            temperature=0.3
        )
        
        return {
            "answer": ai_response,
            "suggestions": ["Ph∆∞∆°ng ph√°p h·ªçc", "L·ªãch tr√¨nh √¥n thi", "K·ªπ thu·∫≠t ghi nh·ªõ", "Chuy·ªÉn sang m√¥n kh√°c"],
            "ai_mode": "study"
        }
    except Exception as e:
        return {
            "answer": """üìñ <strong>Ph∆∞∆°ng ph√°p h·ªçc t·∫≠p</strong><br><br>
            Xin l·ªói, hi·ªán t·∫°i c√≥ l·ªói k·∫øt n·ªëi v·ªõi AI H·ªçc t·∫≠p. Tuy nhi√™n, ƒë√¢y l√† m·ªôt s·ªë m·∫πo hi·ªáu qu·∫£:<br><br>
            
            <strong>üéØ K·ªπ thu·∫≠t Pomodoro:</strong><br>
            ‚Ä¢ H·ªçc 25 ph√∫t, ngh·ªâ 5 ph√∫t<br>
            ‚Ä¢ Sau 4 chu k·ª≥, ngh·ªâ 15-30 ph√∫t<br><br>
            
            <strong>üß† K·ªπ thu·∫≠t ghi nh·ªõ:</strong><br>
            ‚Ä¢ √în l·∫°i sau 1 ng√†y, 1 tu·∫ßn, 1 th√°ng<br>
            ‚Ä¢ T·∫°o flashcards cho t·ª´ kh√≥a quan tr·ªçng<br>
            ‚Ä¢ H·ªçc nh√≥m ƒë·ªÉ trao ƒë·ªïi ki·∫øn th·ª©c<br><br>
            
            H√£y h·ªèi c√¢u h·ªèi c·ª• th·ªÉ ƒë·ªÉ t√¥i c√≥ th·ªÉ h·ªó tr·ª£ t·ªët h∆°n!""",
            "suggestions": ["L·∫≠p k·∫ø ho·∫°ch", "K·ªπ thu·∫≠t ghi nh·ªõ", "√în thi hi·ªáu qu·∫£", "Chuy·ªÉn sang m√¥n kh√°c"],
            "ai_mode": "study"
        }


def handle_time_management_questions(question):
    """X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ qu·∫£n l√Ω th·ªùi gian"""
    try:
        ai_response = get_smart_response(
            prompt=question,
            system_prompt=SYSTEM_PROMPTS['time_management'],
            task_type="general",
            temperature=0.3
        )
        
        return {
            "answer": ai_response,
            "suggestions": ["L·∫≠p k·∫ø ho·∫°ch", "∆Øu ti√™n c√¥ng vi·ªác", "C√¥ng c·ª• qu·∫£n l√Ω", "Chuy·ªÉn sang m√¥n kh√°c"],
            "ai_mode": "time_management"
        }
    except Exception as e:
        return {
            "answer": """‚è∞ <strong>Qu·∫£n l√Ω th·ªùi gian</strong><br><br>
            Xin l·ªói, hi·ªán t·∫°i c√≥ l·ªói k·∫øt n·ªëi v·ªõi AI Qu·∫£n l√Ω th·ªùi gian. Tuy nhi√™n, ƒë√¢y l√† m·ªôt s·ªë m·∫πo h·ªØu √≠ch:<br><br>
            
            <strong>üìÖ Ma tr·∫≠n Eisenhower:</strong><br>
            ‚Ä¢ Quan tr·ªçng & G·∫•p: L√†m ngay<br>
            ‚Ä¢ Quan tr·ªçng & Kh√¥ng g·∫•p: L√™n k·∫ø ho·∫°ch<br>
            ‚Ä¢ Kh√¥ng quan tr·ªçng & G·∫•p: ·ª¶y th√°c<br>
            ‚Ä¢ Kh√¥ng quan tr·ªçng & Kh√¥ng g·∫•p: Lo·∫°i b·ªè<br><br>
            
            <strong>üéØ Quy t·∫Øc 80/20:</strong><br>
            ‚Ä¢ 20% c√¥ng vi·ªác mang l·∫°i 80% k·∫øt qu·∫£<br>
            ‚Ä¢ T·∫≠p trung v√†o nhi·ªám v·ª• quan tr·ªçng nh·∫•t<br><br>
            
            H√£y h·ªèi c√¢u h·ªèi c·ª• th·ªÉ ƒë·ªÉ t√¥i c√≥ th·ªÉ h·ªó tr·ª£ t·ªët h∆°n!""",
            "suggestions": ["L·∫≠p k·∫ø ho·∫°ch h·ªçc t·∫≠p", "∆Øu ti√™n c√¥ng vi·ªác", "C√¢n b·∫±ng h·ªçc t·∫≠p", "Chuy·ªÉn sang m√¥n kh√°c"],
            "ai_mode": "time_management"
        }


# New subject handlers
def handle_linear_algebra_questions(question):
    """X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ ƒê·∫°i s·ªë tuy·∫øn t√≠nh"""
    try:
        ai_response = get_smart_response(
            prompt=question,
            system_prompt=SYSTEM_PROMPTS.get('linear_algebra', SYSTEM_PROMPTS['math']),
            task_type="math",
            temperature=0.3
        )
        
        return {
            "answer": ai_response,
            "suggestions": ["Ma tr·∫≠n", "Vector", "H·ªá ph∆∞∆°ng tr√¨nh", "Chuy·ªÉn sang m√¥n kh√°c"],
            "ai_mode": "linear_algebra"
        }
    except Exception as e:
        return {
            "answer": """üî¢ <strong>ƒê·∫°i s·ªë tuy·∫øn t√≠nh</strong><br><br>
            Xin l·ªói, hi·ªán t·∫°i c√≥ l·ªói k·∫øt n·ªëi v·ªõi AI. Tuy nhi√™n, ƒë√¢y l√† m·ªôt s·ªë kh√°i ni·ªám c∆° b·∫£n:<br><br>
            
            <strong>üìä Ma tr·∫≠n:</strong><br>
            ‚Ä¢ Ma tr·∫≠n vu√¥ng: s·ªë h√†ng = s·ªë c·ªôt<br>
            ‚Ä¢ Ma tr·∫≠n ƒë∆°n v·ªã: ƒë∆∞·ªùng ch√©o ch√≠nh = 1<br>
            ‚Ä¢ ƒê·ªãnh th·ª©c: det(A)<br><br>
            
            <strong>‚û°Ô∏è Vector:</strong><br>
            ‚Ä¢ T√≠ch v√¥ h∆∞·ªõng: a¬∑b = |a||b|cos(Œ∏)<br>
            ‚Ä¢ ƒê·ªô d√†i vector: |v| = ‚àö(x¬≤ + y¬≤ + z¬≤)<br><br>
            
            H√£y h·ªèi c√¢u h·ªèi c·ª• th·ªÉ ƒë·ªÉ t√¥i c√≥ th·ªÉ h·ªó tr·ª£ t·ªët h∆°n!""",
            "suggestions": ["Ma tr·∫≠n", "Vector", "ƒê·ªãnh th·ª©c", "Chuy·ªÉn sang m√¥n kh√°c"],
            "ai_mode": "linear_algebra"
        }


def handle_probability_statistics_questions(question):
    """X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ X√°c su·∫•t th·ªëng k√™"""
    try:
        ai_response = get_smart_response(
            prompt=question,
            system_prompt=SYSTEM_PROMPTS.get('probability_statistics', SYSTEM_PROMPTS['math']),
            task_type="math",
            temperature=0.3
        )
        
        return {
            "answer": ai_response,
            "suggestions": ["X√°c su·∫•t", "Ph√¢n ph·ªëi", "Ki·ªÉm ƒë·ªãnh", "Chuy·ªÉn sang m√¥n kh√°c"],
            "ai_mode": "probability_statistics"
        }
    except Exception as e:
        return {
            "answer": """üìà <strong>X√°c su·∫•t th·ªëng k√™</strong><br><br>
            Xin l·ªói, hi·ªán t·∫°i c√≥ l·ªói k·∫øt n·ªëi v·ªõi AI. Tuy nhi√™n, ƒë√¢y l√† m·ªôt s·ªë c√¥ng th·ª©c c∆° b·∫£n:<br><br>
            
            <strong>üé≤ X√°c su·∫•t:</strong><br>
            ‚Ä¢ P(A) = s·ªë tr∆∞·ªùng h·ª£p thu·∫≠n l·ª£i / t·ªïng s·ªë tr∆∞·ªùng h·ª£p<br>
            ‚Ä¢ P(A ‚à™ B) = P(A) + P(B) - P(A ‚à© B)<br>
            ‚Ä¢ P(A|B) = P(A ‚à© B) / P(B)<br><br>
            
            <strong>üìä Th·ªëng k√™:</strong><br>
            ‚Ä¢ Trung b√¨nh: xÃÑ = Œ£x/n<br>
            ‚Ä¢ Ph∆∞∆°ng sai: œÉ¬≤ = Œ£(x-xÃÑ)¬≤/n<br><br>
            
            H√£y h·ªèi c√¢u h·ªèi c·ª• th·ªÉ ƒë·ªÉ t√¥i c√≥ th·ªÉ h·ªó tr·ª£ t·ªët h∆°n!""",
            "suggestions": ["X√°c su·∫•t c∆° b·∫£n", "Ph√¢n ph·ªëi chu·∫©n", "Ki·ªÉm ƒë·ªãnh gi·∫£ thuy·∫øt", "Chuy·ªÉn sang m√¥n kh√°c"],
            "ai_mode": "probability_statistics"
        }


def handle_calculus_questions(question):
    """X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ Gi·∫£i t√≠ch"""
    try:
        ai_response = get_smart_response(
            prompt=question,
            system_prompt=SYSTEM_PROMPTS.get('calculus', SYSTEM_PROMPTS['math']),
            task_type="math",
            temperature=0.3
        )
        
        return {
            "answer": ai_response,
            "suggestions": ["ƒê·∫°o h√†m", "T√≠ch ph√¢n", "Gi·ªõi h·∫°n", "Chuy·ªÉn sang m√¥n kh√°c"],
            "ai_mode": "calculus"
        }
    except Exception as e:
        return {
            "answer": """‚à´ <strong>Gi·∫£i t√≠ch</strong><br><br>
            Xin l·ªói, hi·ªán t·∫°i c√≥ l·ªói k·∫øt n·ªëi v·ªõi AI. Tuy nhi√™n, ƒë√¢y l√† m·ªôt s·ªë c√¥ng th·ª©c c∆° b·∫£n:<br><br>
            
            <strong>üìà ƒê·∫°o h√†m:</strong><br>
            ‚Ä¢ (x^n)' = n¬∑x^(n-1)<br>
            ‚Ä¢ (sin x)' = cos x<br>
            ‚Ä¢ (cos x)' = -sin x<br>
            ‚Ä¢ (e^x)' = e^x<br><br>
            
            <strong>‚à´ T√≠ch ph√¢n:</strong><br>
            ‚Ä¢ ‚à´x^n dx = x^(n+1)/(n+1) + C<br>
            ‚Ä¢ ‚à´sin x dx = -cos x + C<br>
            ‚Ä¢ ‚à´cos x dx = sin x + C<br><br>
            
            H√£y h·ªèi c√¢u h·ªèi c·ª• th·ªÉ ƒë·ªÉ t√¥i c√≥ th·ªÉ h·ªó tr·ª£ t·ªët h∆°n!""",
            "suggestions": ["Quy t·∫Øc ƒë·∫°o h√†m", "T√≠ch ph√¢n c∆° b·∫£n", "Gi·ªõi h·∫°n", "Chuy·ªÉn sang m√¥n kh√°c"],
            "ai_mode": "calculus"
        }


# Context-aware handlers (for conversation continuity)
def handle_ai_question_with_context(question, context_messages=None):
    """X·ª≠ l√Ω c√¢u h·ªèi AI v·ªõi context t·ª´ cu·ªôc tr√≤ chuy·ªán tr∆∞·ªõc"""
    print(f"[DEBUG] handle_ai_question_with_context called")
    print(f"[DEBUG] Question: {question}")
    print(f"[DEBUG] Context messages: {len(context_messages) if context_messages else 0}")
    
    try:
        # PRIORITY 1: Check for calendar requests first
        calendar_keywords = [
            'l·ªãch', 'deadline', 'h·∫πn', 'cu·ªôc h·ªçp', 's·ª± ki·ªán', 'nh·∫Øc nh·ªü', 
            'meeting', 'event', 'reminder', 'schedule', 'appointment',
            't·∫°o l·ªãch', 'ƒë·∫∑t l·ªãch', 'th√™m l·ªãch', 'l√™n l·ªãch'
        ]
        
        if any(keyword in question.lower() for keyword in calendar_keywords):
            print(f"[DEBUG] Detected calendar request in AI handler")
            try:
                from calendar_integration import CalendarIntegration
                
                # Generate a simple user ID for calendar functionality
                user_id = f"user_{datetime.now().strftime('%Y%m%d')}"
                
                calendar_integration = CalendarIntegration()
                calendar_result = calendar_integration.process_calendar_request(user_id, question)
                
                # Format calendar response for chat interface
                if calendar_result['success']:
                    return {
                        "answer": calendar_result['message'],
                        "suggestions": ["Xem l·ªãch", "T·∫°o s·ª± ki·ªán kh√°c", "H·ªèi v·ªÅ h·ªçc t·∫≠p"],
                        "ai_mode": "calendar",
                        "calendar_data": calendar_result.get('data'),
                        "calendar_action": calendar_result.get('action')
                    }
                else:
                    # If calendar fails, provide helpful response
                    print(f"[DEBUG] Calendar processing failed: {calendar_result['message']}")
                    if calendar_result.get('action') == 'auth_required':
                        return {
                            "answer": f"{calendar_result['message']}\n\nüí° **Ho·∫∑c b·∫°n c√≥ th·ªÉ h·ªèi t√¥i v·ªÅ:**\n‚Ä¢ Ph∆∞∆°ng ph√°p qu·∫£n l√Ω th·ªùi gian hi·ªáu qu·∫£\n‚Ä¢ C√°ch l·∫≠p k·∫ø ho·∫°ch h·ªçc t·∫≠p\n‚Ä¢ M·∫πo t·ªï ch·ª©c c√¥ng vi·ªác",
                            "suggestions": ["Qu·∫£n l√Ω th·ªùi gian", "L·∫≠p k·∫ø ho·∫°ch h·ªçc", "H·ªèi kh√°c"],
                            "ai_mode": "calendar_suggestion",
                            "calendar_data": calendar_result.get('data')
                        }
                    elif calendar_result.get('action') == 'none':
                        # Continue to normal AI processing for non-calendar questions
                        pass
                    else:
                        return {
                            "answer": f"{calendar_result['message']}\n\nüí° **Trong khi ƒë√≥, t√¥i c√≥ th·ªÉ gi√∫p b·∫°n:**\n‚Ä¢ L·ªùi khuy√™n v·ªÅ qu·∫£n l√Ω th·ªùi gian\n‚Ä¢ Ph∆∞∆°ng ph√°p l·∫≠p k·∫ø ho·∫°ch h·ªçc t·∫≠p\n‚Ä¢ K·ªπ thu·∫≠t t·ªï ch·ª©c c√¥ng vi·ªác hi·ªáu qu·∫£",
                            "suggestions": ["M·∫πo qu·∫£n l√Ω th·ªùi gian", "L·∫≠p k·∫ø ho·∫°ch h·ªçc", "H·ªèi kh√°c"],
                            "ai_mode": "calendar_fallback"
                        }
                    
            except ImportError:
                print("[DEBUG] Calendar integration not available")
                # Add helpful response about time management
                if any(word in question.lower() for word in ['l·ªãch', 'deadline', 'k·∫ø ho·∫°ch', 'th·ªùi gian']):
                    return {
                        "answer": """üìÖ **V·ªÅ qu·∫£n l√Ω th·ªùi gian v√† l·ªãch tr√¨nh:**\n\nT√¥i hi·ªÉu b·∫°n quan t√¢m ƒë·∫øn vi·ªác qu·∫£n l√Ω th·ªùi gian! D√π ch·ª©c nƒÉng calendar ch∆∞a kh·∫£ d·ª•ng, t√¥i c√≥ th·ªÉ chia s·∫ª c√°c m·∫πo h·ªØu √≠ch:\n\n**üéØ Nguy√™n t·∫Øc ∆∞u ti√™n:**\n‚Ä¢ Ma tr·∫≠n Eisenhower: Quan tr·ªçng vs G·∫•p\n‚Ä¢ Quy t·∫Øc 80/20: T·∫≠p trung v√†o 20% c√¥ng vi·ªác quan tr·ªçng\n\n**‚è∞ K·ªπ thu·∫≠t Pomodoro:**\n‚Ä¢ L√†m vi·ªác 25 ph√∫t, ngh·ªâ 5 ph√∫t\n‚Ä¢ TƒÉng t·∫≠p trung v√† hi·ªáu su·∫•t\n\n**üìù L·∫≠p k·∫ø ho·∫°ch:**\n‚Ä¢ Vi·∫øt ra m·ª•c ti√™u c·ª• th·ªÉ\n‚Ä¢ Chia nh·ªè c√¥ng vi·ªác l·ªõn\n‚Ä¢ ƒê·∫∑t deadline th·ª±c t·∫ø\n\nB·∫°n mu·ªën t√¥i gi·∫£i th√≠ch chi ti·∫øt v·ªÅ ph∆∞∆°ng ph√°p n√†o?""",
                        "suggestions": ["Ma tr·∫≠n Eisenhower", "K·ªπ thu·∫≠t Pomodoro", "L·∫≠p k·∫ø ho·∫°ch h·ªçc t·∫≠p", "M·∫πo tƒÉng hi·ªáu su·∫•t"],
                        "ai_mode": "time_management"
                    }
            except Exception as calendar_error:
                print(f"[DEBUG] Calendar integration error: {calendar_error}")
                # Continue to normal AI processing
        
        # PRIORITY 2: Normal AI processing
        # Prepare messages with context
        messages = []
        
        # Add system prompt
        messages.append({
            "role": "system", 
            "content": """B·∫°n l√† tr·ª£ l√Ω h·ªçc t·∫≠p th√¥ng minh. Tr·∫£ l·ªùi c√¢u h·ªèi m·ªôt c√°ch ch√≠nh x√°c v√† h·ªØu √≠ch.
            S·ª≠ d·ª•ng HTML formatting cho c√¢u tr·∫£ l·ªùi ƒë·∫πp m·∫Øt. H√£y duy tr√¨ ng·ªØ c·∫£nh cu·ªôc tr√≤ chuy·ªán.
            
            KHI NG∆Ø·ªúI D√ôNG H·ªéI V·ªÄ TH·ªúI GIAN/L·ªäCH TR√åNH:
            - ƒê∆∞a ra l·ªùi khuy√™n th·ª±c t·∫ø v·ªÅ qu·∫£n l√Ω th·ªùi gian
            - G·ª£i √Ω c√°c ph∆∞∆°ng ph√°p l·∫≠p k·∫ø ho·∫°ch hi·ªáu qu·∫£
            - Chia s·∫ª k·ªπ thu·∫≠t t·ªï ch·ª©c c√¥ng vi·ªác
            """
        })
        
        # Add context messages if available
        if context_messages:
            for msg in context_messages[-6:]:  # Keep last 6 messages for context
                if msg.get('role') and msg.get('content'):
                    messages.append({
                        "role": msg['role'],
                        "content": msg['content']
                    })
        
        # Add current question
        messages.append({"role": "user", "content": question})
        
        # Use OpenAI manager for response
        result = openai_manager.chat_completion(
            messages=messages,
            task_type="general",
            temperature=0.3
        )
        
        if result["success"]:
            ai_response = result["response"].choices[0].message.content.strip()
            
            # Check if response should include calendar/time management suggestions
            response_lower = ai_response.lower()
            question_lower = question.lower()
            
            calendar_trigger_words = [
                'th·ªùi gian', 'l·ªãch tr√¨nh', 'deadline', 'k·∫ø ho·∫°ch', 'nh·∫Øc nh·ªü',
                't·ªï ch·ª©c', 'qu·∫£n l√Ω', '∆∞u ti√™n'
            ]
            
            suggestions = ["H·ªèi th√™m", "L√†m r√µ", "V√≠ d·ª•", "Chuy·ªÉn ch·ªß ƒë·ªÅ"]
            
            if any(word in question_lower or word in response_lower for word in calendar_trigger_words):
                suggestions = ["M·∫πo qu·∫£n l√Ω th·ªùi gian", "K·ªπ thu·∫≠t Pomodoro", "L·∫≠p k·∫ø ho·∫°ch h·ªçc"] + suggestions[:1]
            
            return {
                "answer": ai_response,
                "suggestions": suggestions,
                "ai_mode": "context_aware",
                "model_used": result["model_used"]
            }
        else:
            return {
                "answer": f"Xin l·ªói, c√≥ l·ªói x·∫£y ra: {result.get('error', 'Unknown error')}",
                "suggestions": ["Th·ª≠ l·∫°i", "H·ªèi kh√°c", "ƒê∆°n gi·∫£n h√≥a c√¢u h·ªèi"],
                "ai_mode": "error"
            }
            
    except Exception as e:
        print(f"[ERROR] Context-aware AI error: {e}")
        return {
            "answer": f"Xin l·ªói, c√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω c√¢u h·ªèi: {str(e)}",
            "suggestions": ["Th·ª≠ l·∫°i", "H·ªèi ƒë∆°n gi·∫£n h∆°n"],
            "ai_mode": "error"
        }


# Additional context-aware handlers for specific subjects
def handle_math_questions_with_context(question, context_messages=None):
    """X·ª≠ l√Ω c√¢u h·ªèi To√°n v·ªõi context"""
    messages = [{"role": "system", "content": SYSTEM_PROMPTS['math']}]
    if context_messages:
        messages.extend(context_messages[-4:])
    messages.append({"role": "user", "content": question})
    
    result = openai_manager.chat_completion(messages=messages, task_type="math", temperature=0.3)
    if result["success"]:
        return {
            "answer": result["response"].choices[0].message.content.strip(),
            "suggestions": ["B√†i t·∫≠p th√™m", "Gi·∫£i th√≠ch chi ti·∫øt", "V√≠ d·ª• kh√°c"],
            "ai_mode": "math_context"
        }
    return {"answer": "L·ªói x·ª≠ l√Ω c√¢u h·ªèi To√°n.", "suggestions": ["Th·ª≠ l·∫°i"]}


def handle_programming_questions_with_context(question, context_messages=None):
    """X·ª≠ l√Ω c√¢u h·ªèi L·∫≠p tr√¨nh v·ªõi context"""
    messages = [{"role": "system", "content": SYSTEM_PROMPTS['programming']}]
    if context_messages:
        messages.extend(context_messages[-4:])
    messages.append({"role": "user", "content": question})
    
    result = openai_manager.chat_completion(messages=messages, task_type="programming", temperature=0.2)
    if result["success"]:
        return {
            "answer": result["response"].choices[0].message.content.strip(),
            "suggestions": ["Code example", "Best practices", "Debug help"],
            "ai_mode": "programming_context"
        }
    return {"answer": "L·ªói x·ª≠ l√Ω c√¢u h·ªèi L·∫≠p tr√¨nh.", "suggestions": ["Th·ª≠ l·∫°i"]}


# Additional subject handlers with context
def handle_physics_questions_with_context(question, context_messages=None):
    """X·ª≠ l√Ω c√¢u h·ªèi V·∫≠t l√Ω v·ªõi context"""
    messages = [{"role": "system", "content": SYSTEM_PROMPTS['physics']}]
    if context_messages:
        messages.extend(context_messages[-4:])
    messages.append({"role": "user", "content": question})
    
    result = openai_manager.chat_completion(messages=messages, task_type="general", temperature=0.3)
    return _format_response_with_fallback(result, "physics_context", ["Th√≠ nghi·ªám", "·ª®ng d·ª•ng", "C√¥ng th·ª©c"])


def handle_chemistry_questions_with_context(question, context_messages=None):
    """X·ª≠ l√Ω c√¢u h·ªèi H√≥a h·ªçc v·ªõi context"""
    messages = [{"role": "system", "content": SYSTEM_PROMPTS['chemistry']}]
    if context_messages:
        messages.extend(context_messages[-4:])
    messages.append({"role": "user", "content": question})
    
    result = openai_manager.chat_completion(messages=messages, task_type="general", temperature=0.3)
    return _format_response_with_fallback(result, "chemistry_context", ["Ph·∫£n ·ª©ng", "Th√≠ nghi·ªám", "C∆° ch·∫ø"])


def handle_history_questions_with_context(question, context_messages=None):
    """X·ª≠ l√Ω c√¢u h·ªèi L·ªãch s·ª≠ v·ªõi context"""
    messages = [{"role": "system", "content": SYSTEM_PROMPTS['history']}]
    if context_messages:
        messages.extend(context_messages[-4:])
    messages.append({"role": "user", "content": question})
    
    result = openai_manager.chat_completion(messages=messages, task_type="general", temperature=0.3)
    return _format_response_with_fallback(result, "history_context", ["Nh√¢n v·∫≠t", "S·ª± ki·ªán", "√ù nghƒ©a"])


def handle_english_questions_with_context(question, context_messages=None):
    """X·ª≠ l√Ω c√¢u h·ªèi Ti·∫øng Anh v·ªõi context"""
    messages = [{"role": "system", "content": SYSTEM_PROMPTS['english']}]
    if context_messages:
        messages.extend(context_messages[-4:])
    messages.append({"role": "user", "content": question})
    
    result = openai_manager.chat_completion(messages=messages, task_type="general", temperature=0.3)
    return _format_response_with_fallback(result, "english_context", ["Grammar", "Vocabulary", "Practice"])


def handle_study_questions_with_context(question, context_messages=None):
    """X·ª≠ l√Ω c√¢u h·ªèi H·ªçc t·∫≠p v·ªõi context"""
    messages = [{"role": "system", "content": SYSTEM_PROMPTS['study']}]
    if context_messages:
        messages.extend(context_messages[-4:])
    messages.append({"role": "user", "content": question})
    
    result = openai_manager.chat_completion(messages=messages, task_type="general", temperature=0.3)
    return _format_response_with_fallback(result, "study_context", ["K·∫ø ho·∫°ch", "Ph∆∞∆°ng ph√°p", "ƒê·ªông l·ª±c"])


def handle_time_management_questions_with_context(question, context_messages=None):
    """X·ª≠ l√Ω c√¢u h·ªèi Qu·∫£n l√Ω th·ªùi gian v·ªõi context"""
    messages = [{"role": "system", "content": SYSTEM_PROMPTS['time_management']}]
    if context_messages:
        messages.extend(context_messages[-4:])
    messages.append({"role": "user", "content": question})
    
    result = openai_manager.chat_completion(messages=messages, task_type="general", temperature=0.3)
    return _format_response_with_fallback(result, "time_management_context", ["L·∫≠p k·∫ø ho·∫°ch", "∆Øu ti√™n", "C√¢n b·∫±ng"])


def handle_general_questions_with_context(question, context_messages=None):
    """X·ª≠ l√Ω c√¢u h·ªèi chung v·ªõi context"""
    messages = [{"role": "system", "content": "B·∫°n l√† tr·ª£ l√Ω h·ªçc t·∫≠p th√¥ng minh. Tr·∫£ l·ªùi m·ªôt c√°ch h·ªØu √≠ch v√† ch√≠nh x√°c."}]
    if context_messages:
        messages.extend(context_messages[-4:])
    messages.append({"role": "user", "content": question})
    
    result = openai_manager.chat_completion(messages=messages, task_type="general", temperature=0.3)
    return _format_response_with_fallback(result, "general_context", ["H·ªèi th√™m", "L√†m r√µ", "Chuy·ªÉn ch·ªß ƒë·ªÅ"])


def _format_response_with_fallback(result, ai_mode, suggestions):
    """Helper function ƒë·ªÉ format response v·ªõi fallback"""
    if result["success"]:
        return {
            "answer": result["response"].choices[0].message.content.strip(),
            "suggestions": suggestions,
            "ai_mode": ai_mode
        }
    else:
        return {
            "answer": f"L·ªói x·ª≠ l√Ω c√¢u h·ªèi: {result.get('error', 'Unknown error')}",
            "suggestions": ["Th·ª≠ l·∫°i", "H·ªèi kh√°c"],
            "ai_mode": "error"
        }


# Study Tools Functions (for future expansion)

